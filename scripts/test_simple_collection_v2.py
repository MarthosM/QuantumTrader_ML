"""
Script simplificado para testar coleta de dados hist√≥ricos
Vers√£o 2 - Com porta din√¢mica e melhor tratamento de erros
"""

import os
import sys
import time
import socket
import logging
from datetime import datetime, timedelta
from multiprocessing import Process, Queue
from multiprocessing.connection import Client
from dotenv import load_dotenv

# Adicionar path do projeto
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('SimpleCollectorV2')


def find_free_port():
    """Encontra uma porta livre no sistema"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('', 0))
        s.listen(1)
        port = s.getsockname()[1]
    return port


def run_isolated_server(queue: Queue, port: int):
    """Executa servidor ProfitDLL em processo isolado"""
    try:
        # Importar dentro do processo isolado
        from src.integration.profit_dll_server import ProfitDLLServer
        import os
        from dotenv import load_dotenv
        
        # Reconfigurar logging no processo filho
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        logger = logging.getLogger('IsolatedServer')
        
        # Carregar vari√°veis de ambiente
        load_dotenv()
        
        logger.info(f"üöÄ Iniciando servidor isolado na porta {port}...")
        
        # Criar servidor com porta espec√≠fica
        server = ProfitDLLServer(pipe_name='profit_dll_pipe', port=port)
        
        # Configura√ß√£o
        dll_config = {
            'dll_path': r"C:\Users\marth\Downloads\ProfitDLL\DLLs\Win64\ProfitDLL.dll",
            'username': os.getenv('PROFIT_USERNAME'),
            'password': os.getenv('PROFIT_PASSWORD'),
            'key': os.getenv('PROFIT_KEY')
        }
        
        # Reportar status
        queue.put({"status": "initialized", "port": port})
        
        # Iniciar servidor
        server.start(dll_config)
        
    except Exception as e:
        logger.error(f"‚ùå Erro no servidor: {e}")
        import traceback
        traceback.print_exc()
        queue.put({"status": "error", "message": str(e)})


def test_direct_connection():
    """Testa conex√£o direta ao ProfitDLL (para compara√ß√£o)"""
    logger.info("\n" + "="*80)
    logger.info("üß™ TESTE DIRETO (sem isolamento)")
    logger.info("="*80)
    
    try:
        from src.connection_manager_v4 import ConnectionManagerV4
        
        dll_path = r"C:\Users\marth\Downloads\ProfitDLL\DLLs\Win64\ProfitDLL.dll"
        conn = ConnectionManagerV4(dll_path)
        
        logger.info("üîå Tentando conectar diretamente...")
        result = conn.initialize(
            key=os.getenv("PROFIT_KEY"),
            username=os.getenv("PROFIT_USERNAME"),
            password=os.getenv("PROFIT_PASSWORD")
        )
        
        if result:
            logger.info("‚úÖ Conex√£o direta bem-sucedida!")
            
            # Testar hist√≥rico
            logger.info("üìä Testando GetHistoryTrades...")
            
            trades_received = []
            def on_history_trade(data):
                trades_received.append(data)
            
            conn.register_history_trade_callback(on_history_trade)
            
            success = conn.get_history_trades(
                ticker='WDOU25',
                exchange='F',
                date_start='01/08/2025',
                date_end='01/08/2025'
            )
            
            logger.info(f"Resultado da solicita√ß√£o: {success}")
            
            # Aguardar dados
            time.sleep(10)
            
            logger.info(f"Dados recebidos: {len(trades_received)}")
            
            conn.disconnect()
        else:
            logger.error("‚ùå Falha na conex√£o direta")
            
    except Exception as e:
        logger.error(f"‚ùå Erro no teste direto: {e}")


def test_simple_collection():
    """Testa coleta simples de dados hist√≥ricos com servidor isolado"""
    logger.info("="*80)
    logger.info("üß™ TESTE COM SERVIDOR ISOLADO")
    logger.info("="*80)
    
    # Verificar se pyzmq est√° instalado
    try:
        import zmq
        logger.info(f"‚úÖ pyzmq instalado - vers√£o: {zmq.zmq_version()}")
    except ImportError:
        logger.error("‚ùå pyzmq n√£o est√° instalado!")
        logger.error("Execute: pip install pyzmq")
        return
    
    # Encontrar porta livre
    port = find_free_port()
    logger.info(f"üîç Usando porta livre: {port}")
    
    # Criar fila para comunica√ß√£o
    queue = Queue()
    
    # Iniciar servidor em processo separado
    logger.info("\nüîß Iniciando servidor ProfitDLL...")
    server_process = Process(target=run_isolated_server, args=(queue, port))
    server_process.start()
    
    # Aguardar inicializa√ß√£o
    logger.info("‚è≥ Aguardando servidor inicializar...")
    initialized = False
    server_port = None
    
    for i in range(30):  # 30 segundos timeout
        if not queue.empty():
            msg = queue.get()
            if msg.get("status") == "initialized":
                server_port = msg.get("port", port)
                logger.info(f"‚úÖ Servidor inicializado na porta {server_port}!")
                initialized = True
                break
            elif msg.get("status") == "error":
                logger.error(f"‚ùå Erro na inicializa√ß√£o: {msg.get('message')}")
                break
        
        time.sleep(1)
        if i % 5 == 0:
            logger.info(f"   Aguardando... {i}s")
    
    if not initialized:
        logger.error("‚ùå Servidor n√£o inicializou no tempo esperado")
        server_process.terminate()
        server_process.join()
        return
    
    # Aguardar estabiliza√ß√£o
    logger.info("‚è≥ Aguardando estabiliza√ß√£o...")
    time.sleep(5)
    
    try:
        # Conectar ao servidor via IPC
        logger.info(f"\nüîå Conectando ao servidor na porta {server_port}...")
        server_address = ('localhost', server_port)
        client = Client(server_address, authkey=b'profit_dll_secret')
        logger.info("‚úÖ Conectado ao servidor IPC!")
        
        # Solicitar status
        logger.info("\nüìä Verificando status do servidor...")
        client.send({'type': 'status'})
        
        # Aguardar resposta
        if client.poll(timeout=5):
            response = client.recv()
            logger.info(f"üì• Status: {response}")
        else:
            logger.warning("‚ö†Ô∏è Sem resposta do servidor")
        
        # Fazer coleta simples
        logger.info("\nüìà Solicitando dados hist√≥ricos...")
        
        # Usar data de ontem (01/08/2025)
        command = {
            'type': 'collect_historical',
            'symbol': 'WDOU25',
            'start_date': '01/08/2025',
            'end_date': '01/08/2025',
            'data_types': ['trades']
        }
        
        logger.info(f"üì§ Enviando comando: {command}")
        client.send(command)
        
        # Aguardar resposta
        logger.info("‚è≥ Aguardando dados...")
        
        if client.poll(timeout=60):  # 60 segundos timeout
            result = client.recv()
            logger.info(f"\nüì• Resposta recebida!")
            
            if result.get('success'):
                logger.info("‚úÖ Coleta bem-sucedida!")
                
                # Analisar dados recebidos
                for data_type, data in result.get('data', {}).items():
                    if data:
                        logger.info(f"\nüìä {data_type.upper()}:")
                        logger.info(f"   Total de registros: {len(data)}")
                        
                        if len(data) > 0:
                            logger.info(f"   Primeiro registro: {data[0]}")
                            if len(data) > 1:
                                logger.info(f"   √öltimo registro: {data[-1]}")
                    else:
                        logger.info(f"‚ö†Ô∏è Nenhum dado de {data_type}")
            else:
                logger.error(f"‚ùå Falha na coleta: {result.get('error')}")
        else:
            logger.error("‚ùå Timeout aguardando resposta do servidor")
        
        # Fechar conex√£o
        client.close()
        logger.info("\nüîå Conex√£o fechada")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na comunica√ß√£o: {e}", exc_info=True)
    
    finally:
        # Finalizar servidor
        logger.info("\nüõë Finalizando servidor...")
        
        try:
            # Tentar finalizar gracefully
            client = Client(('localhost', server_port), authkey=b'profit_dll_secret')
            client.send({'type': 'shutdown'})
            client.close()
        except:
            pass
        
        # Aguardar t√©rmino
        server_process.join(timeout=5)
        
        if server_process.is_alive():
            logger.warning("‚ö†Ô∏è For√ßando t√©rmino do servidor...")
            server_process.terminate()
            server_process.join()
        
        logger.info("‚úÖ Servidor finalizado")
    
    logger.info("\n" + "="*80)
    logger.info("üèÅ TESTE CONCLU√çDO")
    logger.info("="*80)


if __name__ == "__main__":
    # Primeiro testa conex√£o direta para ver se h√° problemas b√°sicos
    test_direct_connection()
    
    # Depois testa com servidor isolado
    logger.info("\n\n")
    test_simple_collection()