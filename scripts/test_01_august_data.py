"""
Teste espec√≠fico para captar dados do dia 01/08/2025
"""

import os
import sys
import time
import logging
from datetime import datetime
from dotenv import load_dotenv

# Adicionar path do projeto
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('Test01August')


def test_01_august():
    """Testa coleta de dados do dia 01/08/2025"""
    logger.info("="*80)
    logger.info("üìÖ TESTE ESPEC√çFICO - DADOS DE 01/08/2025")
    logger.info("="*80)
    logger.info("Data atual: 02/08/2025")
    logger.info("Objetivo: Captar dados de ontem (01/08/2025)")
    
    from src.connection_manager_v4 import ConnectionManagerV4
    
    dll_path = r"C:\Users\marth\Downloads\ProfitDLL\DLLs\Win64\ProfitDLL.dll"
    
    try:
        # Criar connection manager
        conn = ConnectionManagerV4(dll_path)
        
        # Conectar
        logger.info("\nüîå Conectando ao ProfitDLL...")
        if not conn.initialize(
            key=os.getenv("PROFIT_KEY"),
            username=os.getenv("PROFIT_USERNAME"),
            password=os.getenv("PROFIT_PASSWORD")
        ):
            logger.error("‚ùå Falha ao conectar")
            return
            
        logger.info("‚úÖ Conectado com sucesso!")
        
        # Aguardar conex√£o completa
        logger.info("‚è≥ Aguardando estabiliza√ß√£o da conex√£o...")
        time.sleep(5)
        
        # Configurar callback para receber dados
        trades_received = []
        
        def on_history_trade(data):
            trades_received.append(data)
            # Log detalhado do primeiro trade
            if len(trades_received) == 1:
                logger.info("üéØ PRIMEIRO TRADE RECEBIDO!")
                logger.info(f"   Dados completos: {data}")
            elif len(trades_received) % 100 == 0:
                logger.info(f"üìä {len(trades_received)} trades recebidos...")
        
        conn.register_history_trade_callback(on_history_trade)
        logger.info("‚úÖ Callback registrado")
        
        # Lista de testes para o dia 01/08
        tests = [
            {
                'name': 'Dia completo - Sem hor√°rio',
                'ticker': 'WDOU25',
                'exchange': 'F',
                'start': '01/08/2025',
                'end': '01/08/2025'
            },
            {
                'name': 'Dia completo - Com hor√°rio de preg√£o',
                'ticker': 'WDOU25',
                'exchange': 'F',
                'start': '01/08/2025 09:00:00',
                'end': '01/08/2025 18:00:00'
            },
            {
                'name': 'Abertura do preg√£o (primeira hora)',
                'ticker': 'WDOU25',
                'exchange': 'F',
                'start': '01/08/2025 09:00:00',
                'end': '01/08/2025 10:00:00'
            },
            {
                'name': 'Per√≠odo da tarde',
                'ticker': 'WDOU25',
                'exchange': 'F',
                'start': '01/08/2025 14:00:00',
                'end': '01/08/2025 16:00:00'
            },
            {
                'name': 'Com exchange vazia',
                'ticker': 'WDOU25',
                'exchange': '',
                'start': '01/08/2025',
                'end': '01/08/2025'
            },
            {
                'name': 'WDO gen√©rico',
                'ticker': 'WDO',
                'exchange': 'F',
                'start': '01/08/2025 09:00:00',
                'end': '01/08/2025 18:00:00'
            }
        ]
        
        # Executar cada teste
        for i, test in enumerate(tests, 1):
            logger.info(f"\n{'='*70}")
            logger.info(f"üìä TESTE {i}/{len(tests)}: {test['name']}")
            logger.info(f"Ticker: {test['ticker']}")
            logger.info(f"Exchange: '{test['exchange']}'")
            logger.info(f"Per√≠odo: {test['start']} at√© {test['end']}")
            logger.info(f"{'='*70}")
            
            trades_received.clear()
            
            # Fazer a solicita√ß√£o
            logger.info("üì§ Enviando solicita√ß√£o...")
            
            # Chamar diretamente a DLL
            if hasattr(conn.dll, 'GetHistoryTrades'):
                result = conn.dll.GetHistoryTrades(
                    test['ticker'],
                    test['exchange'],
                    test['start'],
                    test['end']
                )
                
                logger.info(f"üì• Resposta da DLL: {result}")
                
                if result == 0:
                    logger.info("‚úÖ Solicita√ß√£o aceita!")
                    
                    # Aguardar dados com monitoramento detalhado
                    logger.info("‚è≥ Aguardando dados...")
                    
                    last_count = 0
                    no_data_counter = 0
                    
                    for second in range(30):  # 30 segundos m√°ximo
                        time.sleep(1)
                        
                        current_count = len(trades_received)
                        
                        if current_count > last_count:
                            new_trades = current_count - last_count
                            logger.info(f"   üìà +{new_trades} trades (total: {current_count})")
                            last_count = current_count
                            no_data_counter = 0
                        else:
                            no_data_counter += 1
                            if second % 5 == 0:
                                logger.info(f"   ‚è≥ Aguardando... {second}s")
                        
                        # Se recebeu muitos dados ou parou de receber
                        if current_count > 1000 or (current_count > 0 and no_data_counter > 5):
                            break
                    
                    # Resultado do teste
                    if trades_received:
                        logger.info(f"\n‚úÖ SUCESSO! Recebidos {len(trades_received)} trades")
                        
                        # An√°lise dos dados
                        logger.info("\nüìä AN√ÅLISE DOS DADOS:")
                        
                        # Primeiro e √∫ltimo trade
                        first_trade = trades_received[0]
                        last_trade = trades_received[-1]
                        
                        logger.info(f"Primeiro trade:")
                        logger.info(f"  Timestamp: {first_trade.get('timestamp')}")
                        logger.info(f"  Pre√ßo: {first_trade.get('price')}")
                        logger.info(f"  Volume: {first_trade.get('volume')}")
                        
                        logger.info(f"\n√öltimo trade:")
                        logger.info(f"  Timestamp: {last_trade.get('timestamp')}")
                        logger.info(f"  Pre√ßo: {last_trade.get('price')}")
                        logger.info(f"  Volume: {last_trade.get('volume')}")
                        
                        # Estat√≠sticas
                        prices = [t.get('price', 0) for t in trades_received if t.get('price')]
                        volumes = [t.get('volume', 0) for t in trades_received if t.get('volume')]
                        
                        if prices:
                            logger.info(f"\nEstat√≠sticas:")
                            logger.info(f"  Pre√ßo m√≠nimo: {min(prices)}")
                            logger.info(f"  Pre√ßo m√°ximo: {max(prices)}")
                            logger.info(f"  Pre√ßo m√©dio: {sum(prices)/len(prices):.2f}")
                            logger.info(f"  Volume total: {sum(volumes)}")
                        
                        # Salvar amostra
                        logger.info("\nüíæ Salvando amostra dos dados...")
                        import json
                        sample_file = f"data/test/sample_01aug_{test['ticker']}_{i}.json"
                        os.makedirs("data/test", exist_ok=True)
                        
                        with open(sample_file, 'w') as f:
                            json.dump(trades_received[:10], f, indent=2, default=str)
                        logger.info(f"   Amostra salva em: {sample_file}")
                        
                        # Este teste funcionou!
                        logger.info("\nüéâ TESTE BEM-SUCEDIDO! Podemos coletar dados hist√≥ricos!")
                        break  # Parar nos outros testes se este funcionou
                        
                    else:
                        logger.warning("‚ö†Ô∏è Nenhum dado recebido ap√≥s 30 segundos")
                        
                elif result == -2147483645:
                    logger.error("‚ùå Erro -2147483645: Par√¢metros inv√°lidos ou dados indispon√≠veis")
                else:
                    logger.error(f"‚ùå Erro desconhecido: {result}")
            else:
                logger.error("‚ùå GetHistoryTrades n√£o dispon√≠vel na DLL")
            
            # Pausa entre testes
            if i < len(tests):
                logger.info("\n‚è∏Ô∏è Pausa de 5 segundos antes do pr√≥ximo teste...")
                time.sleep(5)
        
        # Desconectar
        logger.info("\nüîå Desconectando...")
        conn.disconnect()
        
        # Resumo final
        logger.info("\n" + "="*80)
        logger.info("üìã RESUMO DO TESTE")
        logger.info("="*80)
        
        if any(trades_received):
            logger.info("‚úÖ SUCESSO! Conseguimos coletar dados hist√≥ricos!")
            logger.info("\nPr√≥ximos passos:")
            logger.info("1. Usar o coletor autom√°tico para per√≠odos maiores")
            logger.info("2. Implementar estrat√©gia de coleta em blocos de 9 dias")
            logger.info("3. Armazenar dados em formato Parquet")
        else:
            logger.info("‚ùå N√£o conseguimos coletar dados hist√≥ricos")
            logger.info("\nPoss√≠veis causas:")
            logger.info("1. Mercado pode estar fechado")
            logger.info("2. Dados de 01/08 podem n√£o estar dispon√≠veis ainda")
            logger.info("3. Limita√ß√µes da conta ou da API")
            logger.info("4. Tentar durante o preg√£o para melhores resultados")
        
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}", exc_info=True)


if __name__ == "__main__":
    test_01_august()