"""
Script para coletar dados hist√≥ricos recentes (√∫ltimos 30 dias)
Usa servidor isolado para evitar Segmentation Fault
"""

import os
import sys
import time
import logging
import multiprocessing
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Adicionar path do projeto
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scripts.collect_historical_data import AutomatedDataCollector

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('RecentDataCollection')


def collect_recent_data():
    """Coleta dados dos √∫ltimos 30 dias"""
    logger.info("="*80)
    logger.info("üìä COLETA DE DADOS RECENTES (√öLTIMOS 30 DIAS)")
    logger.info("="*80)
    
    # Verificar credenciais
    required_vars = ['PROFIT_USERNAME', 'PROFIT_PASSWORD', 'PROFIT_KEY']
    missing = [var for var in required_vars if not os.getenv(var)]
    
    if missing:
        logger.error(f"‚ùå Vari√°veis de ambiente faltando: {missing}")
        return
    
    logger.info("‚úÖ Credenciais verificadas")
    
    # Configura√ß√£o para coleta recente
    config = {
        "symbols": ["WDOU25"],  # WDO Setembro - contrato mais recente
        "data_types": ["trades"],
        "data_dir": "data/historical",
        "csv_dir": "data/csv", 
        "log_dir": "logs",
        "report_dir": "reports",
        "dll_path": r"C:\Users\marth\Downloads\ProfitDLL\DLLs\Win64\ProfitDLL.dll",
        "profitdll_server_port": 6790,
        "username": os.getenv("PROFIT_USERNAME"),
        "password": os.getenv("PROFIT_PASSWORD"),
        "key": os.getenv("PROFIT_KEY")
    }
    
    # Per√≠odo de coleta - √∫ltimos 30 dias √∫teis
    end_date = datetime.now() - timedelta(days=1)  # Ontem
    start_date = end_date - timedelta(days=30)
    
    logger.info(f"\nüìÖ Per√≠odo de coleta: {start_date.date()} at√© {end_date.date()}")
    logger.info(f"üìä S√≠mbolo: {config['symbols'][0]} (WDO Setembro 2025)")
    
    try:
        # Criar coletor
        collector = AutomatedDataCollector.__new__(AutomatedDataCollector)
        collector.config = config
        collector._setup_logging()
        collector.collector = None
        collector.server_process = None
        collector.collection_status = {
            'last_run': None,
            'last_success': None,
            'errors': [],
            'symbols_collected': {}
        }
        
        # Iniciar servidor isolado
        logger.info("\nüöÄ Iniciando servidor ProfitDLL isolado...")
        if not collector.start_isolated_server():
            logger.error("‚ùå Falha ao iniciar servidor")
            return
        
        logger.info("‚úÖ Servidor ProfitDLL rodando em processo isolado")
        
        # Inicializar coletor
        from src.database.historical_data_collector import HistoricalDataCollector
        collector.collector = HistoricalDataCollector(config)
        
        # Executar coleta
        total_start = time.time()
        
        for symbol in config['symbols']:
            logger.info(f"\n{'='*60}")
            logger.info(f"üìà Coletando dados de {symbol}")
            logger.info(f"{'='*60}")
            
            try:
                # Coletar dados do per√≠odo
                data = collector.collector.collect_historical_data(
                    symbol=symbol,
                    start_date=start_date,
                    end_date=end_date,
                    data_types=config['data_types']
                )
                
                # Verificar resultado
                if 'trades' in data and not data['trades'].empty:
                    trades_count = len(data['trades'])
                    logger.info(f"‚úÖ {trades_count:,} trades coletados")
                    
                    # Mostrar amostra dos dados
                    logger.info("\nüìä Amostra dos dados coletados:")
                    logger.info(data['trades'].head())
                    
                    # Estat√≠sticas
                    logger.info(f"\nüìà Estat√≠sticas:")
                    logger.info(f"  Pre√ßo m√©dio: R$ {data['trades']['price'].mean():.2f}")
                    logger.info(f"  Volume total: {data['trades']['volume'].sum():,.0f}")
                    logger.info(f"  Per√≠odo: {data['trades']['datetime'].min()} at√© {data['trades']['datetime'].max()}")
                else:
                    logger.warning(f"‚ö†Ô∏è Nenhum dado coletado para {symbol}")
                    
                    # Tentar com datas espec√≠ficas recentes
                    logger.info("\nüîÑ Tentando per√≠odo mais recente (√∫ltimos 7 dias)...")
                    end_date_recent = datetime.now() - timedelta(days=1)
                    start_date_recent = end_date_recent - timedelta(days=7)
                    
                    data_recent = collector.collector.collect_historical_data(
                        symbol=symbol,
                        start_date=start_date_recent,
                        end_date=end_date_recent,
                        data_types=config['data_types']
                    )
                    
                    if 'trades' in data_recent and not data_recent['trades'].empty:
                        logger.info(f"‚úÖ {len(data_recent['trades']):,} trades dos √∫ltimos 7 dias")
                    else:
                        logger.warning("‚ö†Ô∏è Ainda sem dados - verifique se o mercado est√° aberto")
                
            except Exception as e:
                logger.error(f"‚ùå Erro coletando {symbol}: {e}")
                
        # Tempo total
        total_time = time.time() - total_start
        logger.info(f"\n‚è±Ô∏è Tempo total: {total_time/60:.1f} minutos")
        
        # Verificar dados salvos
        logger.info("\nüìÅ Verificando dados salvos...")
        available = collector.collector.get_available_data()
        
        if available:
            for symbol, dates in available.items():
                logger.info(f"\n{symbol}: {len(dates)} arquivos")
                if dates:
                    logger.info(f"  Per√≠odo: {dates[0]} at√© {dates[-1]}")
        else:
            logger.info("Nenhum arquivo salvo encontrado")
        
        # Parar servidor
        collector.stop_server()
        
        logger.info("\n‚ú® Coleta finalizada!")
        
        # Sugest√µes
        logger.info("\nüí° Dicas:")
        logger.info("1. Se n√£o coletou dados, verifique se o mercado est√° aberto")
        logger.info("2. WDOU25 √© o contrato de setembro (mais l√≠quido agora)")
        logger.info("3. Dados hist√≥ricos t√™m limite de 3 meses no ProfitDLL")
        logger.info("4. Execute durante o hor√°rio de preg√£o para melhores resultados")
        
    except Exception as e:
        logger.error(f"‚ùå Erro durante coleta: {e}", exc_info=True)
        if 'collector' in locals() and hasattr(collector, 'server_process'):
            collector.stop_server()


def test_direct_connection():
    """Testa conex√£o direta com GetHistoryTrades"""
    logger.info("\n" + "="*60)
    logger.info("üß™ Teste de Conex√£o Direta")
    logger.info("="*60)
    
    from src.connection_manager_v4 import ConnectionManagerV4
    
    config = {
        'dll_path': r"C:\Users\marth\Downloads\ProfitDLL\DLLs\Win64\ProfitDLL.dll",
        'username': os.getenv("PROFIT_USERNAME"),
        'password': os.getenv("PROFIT_PASSWORD"),
        'key': os.getenv("PROFIT_KEY")
    }
    
    try:
        # Criar connection manager
        conn = ConnectionManagerV4(config['dll_path'])
        
        # Conectar
        if conn.initialize(
            key=config['key'],
            username=config['username'],
            password=config['password']
        ):
            logger.info("‚úÖ Conectado ao ProfitDLL")
            
            # Testar GetHistoryTrades com per√≠odo recente
            end_date = datetime.now() - timedelta(days=1)
            start_date = end_date - timedelta(days=5)
            
            logger.info(f"\nüìÖ Testando per√≠odo: {start_date.date()} at√© {end_date.date()}")
            
            # Registrar callback
            trades_received = []
            
            def on_history_trade(data):
                trades_received.append(data)
                if len(trades_received) <= 5:
                    logger.info(f"Trade recebido: {data.get('ticker')} @ {data.get('price')}")
            
            conn.register_history_trade_callback(on_history_trade)
            
            # Testar diferentes formatos de data
            date_formats = [
                (start_date.strftime('%d/%m/%Y'), end_date.strftime('%d/%m/%Y')),
                (start_date.strftime('%Y%m%d'), end_date.strftime('%Y%m%d')),
                ('01/08/2025', '02/08/2025'),
                ('20250801', '20250802')
            ]
            
            for start_fmt, end_fmt in date_formats:
                logger.info(f"\nTestando formato: {start_fmt} at√© {end_fmt}")
                
                result = conn.get_history_trades(
                    ticker="WDOU25",
                    exchange="BMF",
                    date_start=start_fmt,
                    date_end=end_fmt
                )
                
                if result:
                    logger.info("‚úÖ Solicita√ß√£o enviada com sucesso")
                    time.sleep(3)
                    
                    if trades_received:
                        logger.info(f"‚úÖ Recebidos {len(trades_received)} trades!")
                        break
                else:
                    logger.warning("‚ùå Falha na solicita√ß√£o")
            
            # Desconectar
            conn.disconnect()
            
        else:
            logger.error("‚ùå Falha ao conectar")
            
    except Exception as e:
        logger.error(f"‚ùå Erro no teste: {e}")


if __name__ == "__main__":
    multiprocessing.freeze_support()
    
    try:
        # Executar coleta de dados recentes
        collect_recent_data()
        
        # Opcional: testar conex√£o direta
        # logger.info("\n" + "="*80)
        # test_direct_connection()
        
    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è Coleta interrompida pelo usu√°rio")
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}", exc_info=True)