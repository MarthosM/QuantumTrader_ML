"""
Teste simples de IPC sem ProfitDLL
Para verificar se a comunica√ß√£o entre processos est√° funcionando
"""

import os
import sys
import time
import socket
import logging
from datetime import datetime
from multiprocessing import Process, Queue
from multiprocessing.connection import Client, Listener
from dotenv import load_dotenv

# Adicionar path do projeto
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('IPCTest')


def find_free_port():
    """Encontra uma porta livre no sistema"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('', 0))
        s.listen(1)
        port = s.getsockname()[1]
    return port


def simple_server(queue: Queue, port: int):
    """Servidor simples sem ProfitDLL"""
    # Reconfigurar logging no processo filho
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger('SimpleServer')
    
    try:
        logger.info(f"üöÄ Iniciando servidor simples na porta {port}...")
        
        # Criar listener
        address = ('localhost', port)
        listener = Listener(address, authkey=b'profit_dll_secret')
        logger.info(f"‚úÖ Listener criado em {address}")
        
        # Reportar status
        queue.put({"status": "initialized", "port": port})
        
        # Aguardar conex√£o
        logger.info("‚è≥ Aguardando cliente...")
        conn = listener.accept()
        logger.info("‚úÖ Cliente conectado!")
        
        # Loop principal
        while True:
            try:
                if conn.poll(timeout=1):
                    msg = conn.recv()
                    logger.info(f"üì• Mensagem recebida: {msg}")
                    
                    if msg.get('type') == 'status':
                        # Responder status
                        response = {
                            'type': 'status_response',
                            'connected': True,
                            'ready': True,
                            'timestamp': datetime.now().isoformat()
                        }
                        conn.send(response)
                        logger.info("üì§ Status enviado")
                        
                    elif msg.get('type') == 'collect_historical':
                        # Simular coleta hist√≥rica
                        logger.info(f"üìä Simulando coleta: {msg.get('symbol')} de {msg.get('start_date')} at√© {msg.get('end_date')}")
                        
                        # Simular alguns dados
                        fake_data = []
                        for i in range(10):
                            fake_data.append({
                                'timestamp': f"2025-08-01 09:{i:02d}:00",
                                'price': 5000 + i * 10,
                                'volume': 100 + i * 5,
                                'type': 'trade'
                            })
                        
                        response = {
                            'type': 'historical_response',
                            'success': True,
                            'data': {
                                'trades': fake_data
                            }
                        }
                        conn.send(response)
                        logger.info("üì§ Dados simulados enviados")
                        
                    elif msg.get('type') == 'shutdown':
                        logger.info("üõë Comando de shutdown recebido")
                        break
                        
            except Exception as e:
                logger.error(f"Erro no loop: {e}")
                break
        
        # Fechar conex√µes
        conn.close()
        listener.close()
        logger.info("‚úÖ Servidor finalizado normalmente")
        
    except Exception as e:
        logger.error(f"‚ùå Erro no servidor: {e}")
        import traceback
        traceback.print_exc()
        queue.put({"status": "error", "message": str(e)})


def test_ipc():
    """Testa comunica√ß√£o IPC b√°sica"""
    logger.info("="*80)
    logger.info("üß™ TESTE DE COMUNICA√á√ÉO IPC")
    logger.info("="*80)
    logger.info("‚ö†Ô∏è  Teste sem ProfitDLL - apenas IPC")
    logger.info("")
    
    # Encontrar porta livre
    port = find_free_port()
    logger.info(f"üîç Usando porta livre: {port}")
    
    # Criar fila para comunica√ß√£o
    queue = Queue()
    
    # Iniciar servidor simples
    logger.info("\nüîß Iniciando servidor simples...")
    server_process = Process(target=simple_server, args=(queue, port))
    server_process.start()
    
    # Aguardar inicializa√ß√£o
    logger.info("‚è≥ Aguardando servidor inicializar...")
    initialized = False
    server_port = None
    
    for i in range(10):
        if not queue.empty():
            msg = queue.get()
            if msg.get("status") == "initialized":
                server_port = msg.get("port", port)
                logger.info(f"‚úÖ Servidor inicializado na porta {server_port}!")
                initialized = True
                break
            elif msg.get("status") == "error":
                logger.error(f"‚ùå Erro na inicializa√ß√£o: {msg.get('message')}")
                break
        
        time.sleep(1)
    
    if not initialized:
        logger.error("‚ùå Servidor n√£o inicializou")
        server_process.terminate()
        server_process.join()
        return
    
    # Aguardar estabiliza√ß√£o
    time.sleep(2)
    
    # Verificar se servidor ainda est√° vivo
    if not server_process.is_alive():
        logger.error("‚ùå Servidor morreu!")
        return
    
    logger.info("‚úÖ Servidor est√°vel!")
    
    try:
        # Conectar ao servidor
        logger.info(f"\nüîå Conectando ao servidor na porta {server_port}...")
        server_address = ('localhost', server_port)
        client = Client(server_address, authkey=b'profit_dll_secret')
        logger.info("‚úÖ Conectado!")
        
        # Teste 1: Status
        logger.info("\nüìä Teste 1: Solicitando status...")
        client.send({'type': 'status'})
        
        if client.poll(timeout=5):
            response = client.recv()
            logger.info(f"‚úÖ Resposta: {response}")
        else:
            logger.error("‚ùå Sem resposta")
        
        # Teste 2: Coleta hist√≥rica simulada
        logger.info("\nüìä Teste 2: Simulando coleta hist√≥rica...")
        client.send({
            'type': 'collect_historical',
            'symbol': 'WDOU25',
            'start_date': '01/08/2025',
            'end_date': '01/08/2025',
            'data_types': ['trades']
        })
        
        if client.poll(timeout=5):
            response = client.recv()
            if response.get('success'):
                logger.info("‚úÖ Dados recebidos!")
                data = response.get('data', {})
                for dtype, records in data.items():
                    logger.info(f"   {dtype}: {len(records)} registros")
                    if records:
                        logger.info(f"   Primeiro: {records[0]}")
                        logger.info(f"   √öltimo: {records[-1]}")
            else:
                logger.error(f"‚ùå Falha: {response}")
        else:
            logger.error("‚ùå Sem resposta")
        
        # Finalizar
        logger.info("\nüõë Enviando shutdown...")
        client.send({'type': 'shutdown'})
        client.close()
        
    except Exception as e:
        logger.error(f"‚ùå Erro no cliente: {e}", exc_info=True)
    
    # Aguardar servidor finalizar
    server_process.join(timeout=5)
    
    if server_process.is_alive():
        logger.warning("‚ö†Ô∏è For√ßando t√©rmino...")
        server_process.terminate()
        server_process.join()
    
    logger.info("\n" + "="*80)
    logger.info("üèÅ TESTE CONCLU√çDO")
    logger.info("="*80)
    
    # An√°lise
    logger.info("\nüìã AN√ÅLISE:")
    if server_process.exitcode == 0:
        logger.info("‚úÖ IPC funcionando corretamente")
        logger.info("‚úÖ Servidor terminou normalmente")
        logger.info("‚ùå Problema est√° na integra√ß√£o com ProfitDLL")
        logger.info("\nüí° SOLU√á√ÉO: Implementar timeout e prote√ß√µes no servidor ProfitDLL")
    else:
        logger.info("‚ùå Problema no IPC ou multiprocessing")


if __name__ == "__main__":
    test_ipc()