"""
Script de Teste com Dados Hist√≥ricos Reais
Usa a arquitetura existente do ConnectionManager para dados hist√≥ricos via ProfitDLL
"""

import os
import sys
import time
import logging
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Imports dos componentes do sistema
from src.connection_manager import ConnectionManager
from src.model_manager import ModelManager
from src.data_structure import TradingDataStructure
from src.data_loader import DataLoader
from src.data_integration import DataIntegration
from src.feature_engine import FeatureEngine
from src.prediction_engine import PredictionEngine
from src.ml_coordinator import MLCoordinator

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('RealDataFlowTest')

class RealDataFlowTester:
    """Testa o fluxo completo usando dados hist√≥ricos reais via ProfitDLL"""
    
    def __init__(self):
        self.logger = logger
        
        # Componentes do sistema
        self.connection = None
        self.model_manager = None
        self.data_structure = None
        self.data_loader = None
        self.data_integration = None
        self.feature_engine = None
        self.prediction_engine = None
        self.ml_coordinator = None
        
        # Estado
        self.connected = False
        self.models_loaded = False
        self.historical_data_loaded = False
        self.features_calculated = False
        
        # Configura√ß√µes do .env
        self.dll_path = os.getenv('PROFIT_DLL_PATH')
        self.key = os.getenv('PROFIT_KEY')
        self.username = os.getenv('PROFIT_USER')
        self.password = os.getenv('PROFIT_PASSWORD')
        self.ticker = os.getenv('TICKER', 'WDOQ25')
        self.models_dir = os.getenv('MODELS_DIR')
        
    def initialize_components(self):
        """Inicializa componentes do sistema"""
        try:
            self.logger.info("\n" + "="*80)
            self.logger.info("üöÄ INICIALIZANDO SISTEMA COM DADOS HIST√ìRICOS REAIS")
            self.logger.info("="*80)
            
            # 1. Connection Manager
            self.logger.info("\nüì° [1/6] Connection Manager...")
            self.connection = ConnectionManager(self.dll_path)
            
            # 2. Data Structure
            self.logger.info("üìä [2/6] Data Structure...")
            self.data_structure = TradingDataStructure()
            self.data_structure.initialize_structure()
            
            # 2.5. Data Loader (handles candle creation)
            self.logger.info("üìà [2.5/6] Data Loader...")
            self.data_loader = DataLoader()
            
            # 3. Data Integration (ponte entre ConnectionManager e DataLoader)
            self.logger.info("üîó [3/6] Data Integration...")
            self.data_integration = DataIntegration(self.connection, self.data_loader)
            
            # 4. Model Manager
            self.logger.info("ü§ñ [4/6] Model Manager...") 
            self.model_manager = ModelManager(self.models_dir)
            
            # 5. Feature Engine
            self.logger.info("‚öôÔ∏è [5/6] Feature Engine...")
            self.feature_engine = FeatureEngine()
            # Configurar para modo desenvolvimento para este teste
            self.feature_engine.production_mode = False
            self.feature_engine.require_validation = False
            self.feature_engine.block_on_dummy_data = False
            
            # 6. Prediction Engine & ML Coordinator
            self.logger.info("üéØ [6/6] Prediction Engine & ML Coordinator...")
            self.prediction_engine = PredictionEngine(self.model_manager)
            self.ml_coordinator = MLCoordinator(
                self.model_manager,
                self.feature_engine,
                self.prediction_engine,
                None
            )
            
            self.logger.info("\n‚úÖ Todos os componentes inicializados!")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na inicializa√ß√£o: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def connect_to_profit(self):
        """Conecta ao ProfitDLL"""
        try:
            self.logger.info("\n" + "="*80)
            self.logger.info("üîå CONECTANDO AO PROFITDLL")
            self.logger.info("="*80)
            
            # Inicializar DLL
            self.logger.info("üîÑ Inicializando DLL...")
            result = self.connection.initialize(
                key=self.key,
                username=self.username,
                password=self.password
            )
            
            if result == 1:
                self.logger.info("‚úÖ DLL inicializada com sucesso!")
                
                # Aguardar estabiliza√ß√£o da conex√£o
                self.logger.info("‚è≥ Aguardando estabiliza√ß√£o (5s)...")
                time.sleep(5)
                
                # Verificar estado da conex√£o
                self.logger.info(f"\nüìä Estado da conex√£o:")
                self.logger.info(f"   üîó Conectado: {'‚úÖ' if self.connection.connected else '‚ùå'}")
                self.logger.info(f"   üè¢ Login: {'‚úÖ' if self.connection.login_state == 0 else '‚ùå'}")
                self.logger.info(f"   üìà Market Data: {'‚úÖ' if self.connection.market_connected else '‚ùå'}")
                
                if self.connection.login_state == 0:  # LOGIN_CONNECTED
                    self.connected = True
                    self.logger.info("\nüéâ Conectado e pronto para dados hist√≥ricos!")
                    return True
                else:
                    self.logger.error("‚ùå Login n√£o conectado")
                    return False
            else:
                self.logger.error(f"‚ùå Falha na inicializa√ß√£o: {result}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro na conex√£o: {e}")
            return False
    
    def load_models(self):
        """Carrega modelos ML"""
        try:
            self.logger.info("\n" + "="*80)
            self.logger.info("ü§ñ CARREGANDO MODELOS ML")
            self.logger.info("="*80)
            
            success = self.model_manager.load_models()
            
            if success and self.model_manager.models:
                self.logger.info(f"\n‚úÖ {len(self.model_manager.models)} modelos carregados:")
                
                for name, model in self.model_manager.models.items():
                    model_type = type(model).__name__
                    features_count = len(self.model_manager.model_features.get(name, []))
                    self.logger.info(f"   ü§ñ {name}: {model_type} ({features_count} features)")
                
                self.models_loaded = True
                return True
            else:
                self.logger.error("‚ùå Nenhum modelo encontrado")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao carregar modelos: {e}")
            return False
    
    def request_historical_data(self, days_back=3):
        """Solicita dados hist√≥ricos reais via ProfitDLL"""
        try:
            self.logger.info("\n" + "="*80)
            self.logger.info("üìà SOLICITANDO DADOS HIST√ìRICOS REAIS")
            self.logger.info("="*80)
            
            if not self.connected:
                self.logger.error("‚ùå N√£o conectado ao ProfitDLL")
                return False
            
            # Definir per√≠odo (m√°ximo 3 dias como recomendado pelo sistema)
            end_date = datetime.now()
            start_date = end_date - timedelta(days=min(days_back, 3))
            
            self.logger.info(f"\nüìÖ Solicitando dados hist√≥ricos:")
            self.logger.info(f"   üéØ Ticker: {self.ticker}")
            self.logger.info(f"   üìÖ De: {start_date.strftime('%Y-%m-%d %H:%M')}")
            self.logger.info(f"   üìÖ At√©: {end_date.strftime('%Y-%m-%d %H:%M')}")
            self.logger.info(f"   ‚è±Ô∏è Per√≠odo: {(end_date - start_date).days} dias")
            
            # Usar o m√©todo existente do ConnectionManager
            self.logger.info("\nüîÑ Enviando requisi√ß√£o...")
            request_result = self.connection.request_historical_data(
                ticker=self.ticker,
                start_date=start_date,
                end_date=end_date
            )
            
            if request_result >= 0:
                self.logger.info(f"‚úÖ Requisi√ß√£o enviada com sucesso! (ID: {request_result})")
                
                # Aguardar dados usando o m√©todo existente
                self.logger.info("\n‚è≥ Aguardando dados hist√≥ricos...")
                wait_success = self.connection.wait_for_historical_data(timeout_seconds=60)
                
                if wait_success:
                    self.logger.info("‚úÖ Dados hist√≥ricos recebidos!")
                    
                    # Transferir dados do DataLoader para TradingDataStructure
                    if hasattr(self.data_loader, 'candles_df') and not self.data_loader.candles_df.empty:
                        self.logger.info("üîÑ Transferindo candles do DataLoader para TradingDataStructure...")
                        success = self.data_structure.update_candles(self.data_loader.candles_df)
                        if success:
                            self.logger.info("‚úÖ Candles transferidos com sucesso!")
                        else:
                            self.logger.warning("‚ö†Ô∏è Falha na transfer√™ncia de candles")
                    
                    # Verificar dados na estrutura
                    candles_df = self.data_structure.get_candles()
                    
                    if not candles_df.empty:
                        self.logger.info(f"\nüìä DADOS HIST√ìRICOS CARREGADOS:")
                        self.logger.info(f"   üïê Total de candles: {len(candles_df)}")
                        self.logger.info(f"   üìÖ Per√≠odo: {candles_df.index[0]} a {candles_df.index[-1]}")
                        self.logger.info(f"   üìä Colunas: {list(candles_df.columns)}")
                        
                        # Estat√≠sticas do √∫ltimo candle
                        last_candle = candles_df.iloc[-1]
                        self.logger.info(f"\nüìà √öltimo candle ({candles_df.index[-1]}):")
                        self.logger.info(f"   Open:  {last_candle['open']:.2f}")
                        self.logger.info(f"   High:  {last_candle['high']:.2f}")
                        self.logger.info(f"   Low:   {last_candle['low']:.2f}")
                        self.logger.info(f"   Close: {last_candle['close']:.2f}")
                        self.logger.info(f"   Volume: {last_candle['volume']:.0f}")
                        
                        # Verificar qualidade dos dados
                        price_range = (candles_df['high'].max() - candles_df['low'].min())
                        avg_volume = candles_df['volume'].mean()
                        
                        self.logger.info(f"\nüìä Qualidade dos dados:")
                        self.logger.info(f"   üìà Range de pre√ßos: {price_range:.2f}")
                        self.logger.info(f"   üìä Volume m√©dio: {avg_volume:.0f}")
                        self.logger.info(f"   ‚úÖ Dados v√°lidos: {len(candles_df.dropna())}/{len(candles_df)}")
                        
                        self.historical_data_loaded = True
                        return True
                    else:
                        self.logger.warning("‚ö†Ô∏è Dados recebidos mas DataFrame est√° vazio")
                        return False
                else:
                    self.logger.error("‚ùå Timeout aguardando dados hist√≥ricos")
                    return False
            else:
                self.logger.error(f"‚ùå Falha na requisi√ß√£o: {request_result}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao solicitar dados hist√≥ricos: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def calculate_features_on_real_data(self):
        """Calcula features usando dados hist√≥ricos reais"""
        try:
            self.logger.info("\n" + "="*80)
            self.logger.info("‚öôÔ∏è CALCULANDO FEATURES COM DADOS REAIS")
            self.logger.info("="*80)
            
            if not self.historical_data_loaded:
                self.logger.error("‚ùå Dados hist√≥ricos n√£o carregados")
                return False
            
            # Verificar dados dispon√≠veis
            candles_df = self.data_structure.get_candles()
            self.logger.info(f"\nüìä Dados dispon√≠veis: {len(candles_df)} candles")
            
            # Calcular features
            self.logger.info("‚öôÔ∏è Iniciando c√°lculo de features...")
            start_time = time.time()
            
            result = self.feature_engine.calculate(
                data=self.data_structure,
                force_recalculate=True,
                use_advanced=True
            )
            
            calc_time = time.time() - start_time
            
            if result:
                self.logger.info(f"‚úÖ Features calculadas em {calc_time:.2f}s")
                
                # Diagn√≥stico das features
                indicators_df = self.data_structure.get_indicators()
                features_df = self.data_structure.get_features()
                
                self.logger.info(f"\nüìà Indicadores t√©cnicos: {len(indicators_df.columns)} calculados")
                self.logger.info(f"ü§ñ Features ML: {len(features_df.columns)} calculadas")
                
                # Mostrar indicadores principais
                if not indicators_df.empty:
                    last_indicators = indicators_df.iloc[-1]
                    key_indicators = ['ema_9', 'ema_20', 'ema_50', 'rsi', 'macd', 'atr', 'adx']
                    
                    self.logger.info(f"\nüìä Indicadores atuais (dados reais):")
                    for ind in key_indicators:
                        if ind in last_indicators and pd.notna(last_indicators[ind]):
                            self.logger.info(f"   {ind}: {last_indicators[ind]:.2f}")
                
                # Verificar qualidade das features
                if not features_df.empty:
                    nan_count = features_df.isna().sum().sum()
                    total_values = len(features_df) * len(features_df.columns)
                    nan_percentage = (nan_count / total_values) * 100
                    
                    self.logger.info(f"\nüìä Qualidade das features:")
                    self.logger.info(f"   üìä Total de valores: {total_values}")
                    self.logger.info(f"   ‚ùå Valores NaN: {nan_count} ({nan_percentage:.1f}%)")
                    self.logger.info(f"   ‚úÖ Valores v√°lidos: {total_values - nan_count} ({100 - nan_percentage:.1f}%)")
                
                self.features_calculated = True
                return True
            else:
                self.logger.error("‚ùå Falha no c√°lculo de features")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao calcular features: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def make_prediction_with_real_data(self):
        """Realiza predi√ß√£o usando dados reais"""
        try:
            self.logger.info("\n" + "="*80)
            self.logger.info("üéØ PREDI√á√ÉO ML COM DADOS REAIS")
            self.logger.info("="*80)
            
            if not self.features_calculated:
                self.logger.error("‚ùå Features n√£o calculadas")
                return False
            
            # Obter pre√ßo atual dos dados reais
            candles_df = self.data_structure.get_candles()
            current_price = candles_df.iloc[-1]['close']
            current_time = candles_df.index[-1]
            
            self.logger.info(f"\nüìä Contexto da predi√ß√£o:")
            self.logger.info(f"   üïê Timestamp: {current_time}")
            self.logger.info(f"   üí∞ Pre√ßo atual: {current_price:.2f}")
            self.logger.info(f"   üìä Baseado em {len(candles_df)} candles reais")
            
            # Fazer predi√ß√£o
            self.logger.info("\nüß† Processando predi√ß√£o com modelos ML...")
            prediction_result = self.ml_coordinator.process_prediction_request(
                self.data_structure
            )
            
            if prediction_result:
                self.logger.info("\n‚úÖ Predi√ß√£o realizada com dados reais!")
                
                self.logger.info(f"\nüéØ RESULTADO DA PREDI√á√ÉO (DADOS REAIS):")
                self.logger.info(f"   üìä Regime: {prediction_result.get('regime', 'N/A').upper()}")
                self.logger.info(f"   üéØ Decis√£o: {prediction_result.get('trade_decision', 'HOLD')}")
                self.logger.info(f"   üí™ Confian√ßa: {prediction_result.get('confidence', 0):.1%}")
                self.logger.info(f"   üìà Dire√ß√£o: {prediction_result.get('direction', 0):.3f}")
                self.logger.info(f"   üé∞ Probabilidade: {prediction_result.get('probability', 0.5):.3f}")
                
                # Analisar se pode operar
                can_trade = prediction_result.get('can_trade', False)
                if can_trade:
                    self.logger.info(f"   ‚úÖ SINAL V√ÅLIDO para trading com dados reais!")
                    
                    # Calcular n√≠veis de entrada
                    atr_value = self.data_structure.get_indicators().iloc[-1].get('atr', 10)
                    stop_distance = max(atr_value * 2, 5)  # M√≠nimo 5 pontos
                    
                    if prediction_result.get('trade_decision') == 'BUY':
                        entry = current_price
                        stop = entry - stop_distance
                        target = entry + (stop_distance * 2)  # Risk/Reward 1:2
                        
                        self.logger.info(f"\nüìà SETUP DE COMPRA (DADOS REAIS):")
                        self.logger.info(f"   üí∞ Entrada: {entry:.2f}")
                        self.logger.info(f"   üõë Stop: {stop:.2f} (-{stop_distance:.1f} pts)")
                        self.logger.info(f"   üéØ Alvo: {target:.2f} (+{stop_distance*2:.1f} pts)")
                        
                    elif prediction_result.get('trade_decision') == 'SELL':
                        entry = current_price
                        stop = entry + stop_distance
                        target = entry - (stop_distance * 2)
                        
                        self.logger.info(f"\nüìâ SETUP DE VENDA (DADOS REAIS):")
                        self.logger.info(f"   üí∞ Entrada: {entry:.2f}")
                        self.logger.info(f"   üõë Stop: {stop:.2f} (+{stop_distance:.1f} pts)")
                        self.logger.info(f"   üéØ Alvo: {target:.2f} (-{stop_distance*2:.1f} pts)")
                else:
                    self.logger.info(f"   ‚è∏Ô∏è Aguardar melhor oportunidade")
                
                return prediction_result
            else:
                self.logger.warning("‚ö†Ô∏è Nenhuma predi√ß√£o gerada")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Erro na predi√ß√£o: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def run_complete_test(self):
        """Executa teste completo com dados hist√≥ricos reais"""
        try:
            self.logger.info("\n" + "="*100)
            self.logger.info("üöÄ TESTE COMPLETO COM DADOS HIST√ìRICOS REAIS VIA PROFITDLL")
            self.logger.info("="*100)
            
            # Etapas do teste
            steps = [
                ("Inicializar Componentes", self.initialize_components),
                ("Conectar ProfitDLL", self.connect_to_profit),
                ("Carregar Modelos ML", self.load_models),
                ("Solicitar Dados Hist√≥ricos", self.request_historical_data),
                ("Calcular Features", self.calculate_features_on_real_data),
                ("Realizar Predi√ß√£o", self.make_prediction_with_real_data)
            ]
            
            results = {}
            
            for step_name, step_func in steps:
                self.logger.info(f"\n‚ñ∂Ô∏è Executando: {step_name}...")
                
                try:
                    result = step_func()
                    results[step_name] = result
                    
                    if result:
                        self.logger.info(f"‚úÖ {step_name}: SUCESSO")
                    else:
                        self.logger.error(f"‚ùå {step_name}: FALHA")
                        
                        # Parar em falhas cr√≠ticas
                        if step_name in ["Conectar ProfitDLL", "Carregar Modelos ML"]:
                            self.logger.error(f"üõë Falha cr√≠tica - parando teste")
                            break
                            
                except Exception as e:
                    self.logger.error(f"‚ùå {step_name}: ERRO - {e}")
                    results[step_name] = False
                    break
                
                # Pausa entre etapas
                time.sleep(2)
            
            # Resumo final
            self.logger.info("\n" + "="*100)
            self.logger.info("üìä RESUMO DO TESTE COM DADOS REAIS")
            self.logger.info("="*100)
            
            success_count = sum(1 for r in results.values() if r)
            total_count = len(results)
            
            self.logger.info(f"\n‚úÖ Etapas bem-sucedidas: {success_count}/{total_count}")
            
            for step_name, result in results.items():
                status = "‚úÖ SUCESSO" if result else "‚ùå FALHA"
                self.logger.info(f"   {step_name}: {status}")
            
            if success_count == total_count:
                self.logger.info(f"\nüéâ SISTEMA COMPLETAMENTE FUNCIONAL COM DADOS REAIS!")
                
                # Mostrar estat√≠sticas finais
                candles_df = self.data_structure.get_candles()
                if not candles_df.empty:
                    self.logger.info(f"\nüìä DADOS PROCESSADOS:")
                    self.logger.info(f"   üìà Candles: {len(candles_df)}")
                    self.logger.info(f"   üïê Per√≠odo: {candles_df.index[0]} a {candles_df.index[-1]}")
                    self.logger.info(f"   üí∞ Range de pre√ßos: {candles_df['low'].min():.2f} - {candles_df['high'].max():.2f}")
                    
                    # Informa√ß√µes do √∫ltimo candle
                    last_candle = candles_df.iloc[-1]
                    self.logger.info(f"\nüìä √öLTIMO CANDLE (TEMPO REAL):")
                    self.logger.info(f"   üïê {candles_df.index[-1]}")
                    self.logger.info(f"   üí∞ {last_candle['close']:.2f} (Vol: {last_candle['volume']:.0f})")
                
            elif success_count >= 4:
                self.logger.info(f"\n‚ö†Ô∏è SISTEMA PARCIALMENTE FUNCIONAL")
            else:
                self.logger.error(f"\n‚ùå SISTEMA COM FALHAS CR√çTICAS")
            
            self.logger.info("="*100)
            
            return results
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro durante teste: {e}")
            return {}
    
    def cleanup(self):
        """Limpa recursos"""
        try:
            if self.connection:
                self.logger.info("\nüîå Desconectando...")
                if hasattr(self.connection, 'disconnect'):
                    self.connection.disconnect()
                    self.logger.info("‚úÖ Desconectado com sucesso!")
        except Exception as e:
            self.logger.error(f"Erro na limpeza: {e}")


def main():
    """Fun√ß√£o principal"""
    tester = RealDataFlowTester()
    
    try:
        # Executar teste completo
        results = tester.run_complete_test()
        
        # Determinar sucesso
        success_count = sum(1 for r in results.values() if r)
        
        if success_count >= 4:  # Pelo menos 4 etapas funcionando
            print(f"\n{'='*60}")
            print("üéâ SISTEMA FUNCIONAL COM DADOS REAIS!")
            print(f"{'='*60}")
            return 0
        else:
            print(f"\n{'='*60}")
            print("‚ùå SISTEMA COM FALHAS CR√çTICAS")
            print(f"{'='*60}")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Teste interrompido pelo usu√°rio")
        return 0
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        return 1
    finally:
        # Sempre fazer cleanup
        tester.cleanup()


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)