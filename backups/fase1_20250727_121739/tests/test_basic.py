#!/usr/bin/env python3
"""
Teste B√°sico do Sistema - Diagn√≥stico
"""

import os
import sys

print("=" * 60)
print("üöÄ TESTE B√ÅSICO DO SISTEMA ML TRADING v2.0")
print("=" * 60)

# Verificar diret√≥rio atual
print(f"üìÅ Diret√≥rio atual: {os.getcwd()}")
print(f"üêç Python: {sys.version}")
print(f"üìÇ Arquivos no diret√≥rio:")
for f in os.listdir('.'):
    if f.endswith('.py'):
        print(f"  - {f}")

print("\nüì¶ Testando imports b√°sicos...")

# Testar import do src
src_path = os.path.join(os.getcwd(), 'src')
print(f"üìÇ Caminho src: {src_path}")
print(f"üîç Src existe: {os.path.exists(src_path)}")

if os.path.exists(src_path):
    print("üìÑ Arquivos em src:")
    for f in os.listdir(src_path):
        if f.endswith('.py'):
            print(f"  - {f}")
    
    # Adicionar ao path
    sys.path.insert(0, src_path)
    print("‚úÖ Src adicionado ao path")
    
    # Testar imports um por um
    test_imports = [
        'connection_manager',
        'model_manager', 
        'data_structure',
        'data_loader',
        'feature_engine',
        'technical_indicators',
        'ml_features'
    ]
    
    success_count = 0
    
    for module_name in test_imports:
        try:
            module = __import__(module_name)
            print(f"‚úÖ {module_name}: OK")
            success_count += 1
        except Exception as e:
            print(f"‚ùå {module_name}: {str(e)}")
    
    print(f"\nüìä Resultado: {success_count}/{len(test_imports)} imports OK")
    
    if success_count >= len(test_imports) * 0.8:
        print("‚úÖ Sistema b√°sico funcional!")
        
        # Teste b√°sico de componentes
        print("\nüß™ Testando componentes b√°sicos...")
        
        try:
            from data_structure import TradingDataStructure
            ds = TradingDataStructure()
            ds.initialize_structure()
            print("‚úÖ TradingDataStructure: OK")
        except Exception as e:
            print(f"‚ùå TradingDataStructure: {e}")
            
        try:
            from data_loader import DataLoader
            dl = DataLoader("test_temp")
            print("‚úÖ DataLoader: OK")
        except Exception as e:
            print(f"‚ùå DataLoader: {e}")
            
        try:
            from technical_indicators import TechnicalIndicators
            ti = TechnicalIndicators()
            print("‚úÖ TechnicalIndicators: OK")
        except Exception as e:
            print(f"‚ùå TechnicalIndicators: {e}")
            
        try:
            from feature_engine import ProductionDataValidator
            import logging
            logger = logging.getLogger('test')
            validator = ProductionDataValidator(logger)
            print("‚úÖ ProductionDataValidator: OK")
        except Exception as e:
            print(f"‚ùå ProductionDataValidator: {e}")
    
    else:
        print("‚ùå Muitos imports falharam - verificar depend√™ncias")
        
else:
    print("‚ùå Diret√≥rio src n√£o encontrado")

print("\n" + "=" * 60)
print("üèÅ TESTE B√ÅSICO FINALIZADO")
print("=" * 60)
