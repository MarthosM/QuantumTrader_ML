"""
Teste Completo do Sistema ML Trading v2.0
Executa fluxo completo de dados seguindo o mapeamento definido
"""

import os
import sys
import pandas as pd
import numpy as np
import logging
import tempfile
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import warnings
warnings.filterwarnings('ignore')

# Adicionar src ao path
src_path = os.path.join(os.path.dirname(__file__), 'src')
sys.path.insert(0, src_path)

# Imports dos componentes principais
try:
    from connection_manager import ConnectionManager
    from model_manager import ModelManager
    from data_structure import TradingDataStructure
    from data_loader import DataLoader
    from feature_engine import FeatureEngine
    from technical_indicators import TechnicalIndicators
    from ml_features import MLFeatures
    from data_pipeline import DataPipeline
    from prediction_engine import PredictionEngine
    from ml_coordinator import MLCoordinator
    from signal_generator import SignalGenerator
    from risk_manager import RiskManager
except ImportError as e:
    print(f"Erro ao importar m√≥dulos: {e}")
    print(f"Caminho src: {src_path}")
    print(f"Arquivos em src: {os.listdir(src_path) if os.path.exists(src_path) else 'Diret√≥rio n√£o existe'}")
    sys.exit(1)

class SystemTester:
    """Teste completo do sistema seguindo mapeamento de fluxo de dados"""
    
    def __init__(self):
        self.logger = self._setup_logger()
        self.temp_dir = tempfile.mkdtemp()
        self.components = {}
        self.test_data = {}
        
        # Configura√ß√µes de teste
        self.config = {
            'dll_path': r"C:\Users\marth\Downloads\ProfitDLL\DLLs\Win64\ProfitDLL.dll",
            'models_dir': 'test_models',
            'ticker': 'WDOZ24',
            'username': 'demo',
            'password': 'demo',
            'use_real_connection': True,
            'data_source': 'profit_historical',
            'start_date': datetime.now() - timedelta(days=30),
            'end_date': datetime.now(),
            'candle_period': 1  # 1 minuto
        }
        
        self.logger.info("SystemTester inicializado")
    
    def _setup_logger(self):
        """Configura logging para o teste"""
        logger = logging.getLogger('SystemTester')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
            
        return logger
    
    def run_complete_test(self):
        """Executa teste completo seguindo fluxo de dados mapeado"""
        
        self.logger.info("üöÄ INICIANDO TESTE COMPLETO DO SISTEMA ML TRADING v2.0")
        self.logger.info("=" * 80)
        
        try:
            # ETAPA 1: Inicializar Conex√£o
            self.logger.info("üì° ETAPA 1: Inicializando Conex√£o com Profit")
            success = self._test_connection_initialization()
            if not success:
                self.logger.warning("‚ö†Ô∏è Conex√£o DLL falhou - usando modo simula√ß√£o controlada")
            
            # ETAPA 2: Carregar Modelos ML
            self.logger.info("üß† ETAPA 2: Carregando Modelos ML e Identificando Features")
            self._test_model_loading()
            
            # ETAPA 3: Estrutura de Dados
            self.logger.info("üìä ETAPA 3: Inicializando Estrutura de Dados")
            self._test_data_structure()
            
            # ETAPA 4: Carregamento de Dados Hist√≥ricos
            self.logger.info("üìà ETAPA 4: Carregando Dados Hist√≥ricos")
            self._test_historical_data_loading()
            
            # ETAPA 5: C√°lculo de Indicadores T√©cnicos
            self.logger.info("üìä ETAPA 5: Calculando Indicadores T√©cnicos")
            self._test_technical_indicators()
            
            # ETAPA 6: Features de Machine Learning
            self.logger.info("ü§ñ ETAPA 6: Calculando Features ML")
            self._test_ml_features()
            
            # ETAPA 7: Engine de Features Completa
            self.logger.info("‚ö° ETAPA 7: Engine de Features Completa")
            self._test_feature_engine()
            
            # ETAPA 8: Pipeline de Dados
            self.logger.info("üîÑ ETAPA 8: Pipeline de Processamento")
            self._test_data_pipeline()
            
            # ETAPA 9: Predi√ß√µes ML
            self.logger.info("üéØ ETAPA 9: Sistema de Predi√ß√µes")
            self._test_predictions()
            
            # ETAPA 10: Sinais de Trading
            self.logger.info("üì¢ ETAPA 10: Gera√ß√£o de Sinais")
            self._test_signal_generation()
            
            # ETAPA 11: Gest√£o de Risco
            self.logger.info("üõ°Ô∏è ETAPA 11: Sistema de Gest√£o de Risco")
            self._test_risk_management()
            
            # ETAPA 12: Relat√≥rio Final
            self.logger.info("üìã ETAPA 12: Relat√≥rio Final do Sistema")
            self._generate_final_report()
            
            self.logger.info("‚úÖ TESTE COMPLETO FINALIZADO COM SUCESSO!")
            
        except Exception as e:
            self.logger.error(f"‚ùå ERRO CR√çTICO NO TESTE: {str(e)}")
            raise
        
        finally:
            self._cleanup()
    
    def _test_connection_initialization(self) -> bool:
        """Testa inicializa√ß√£o da conex√£o com Profit"""
        
        try:
            # Verificar se DLL existe
            dll_path = self.config['dll_path']
            if not os.path.exists(dll_path):
                self.logger.warning(f"DLL n√£o encontrada em {dll_path}")
                return False
            
            # Inicializar ConnectionManager
            self.components['connection'] = ConnectionManager(dll_path)
            
            # Tentar carregar DLL
            success = self.components['connection'].initialize()
            
            if success:
                self.logger.info("‚úÖ ConnectionManager inicializado com sucesso")
                
                # Tentar autenticar se credenciais v√°lidas
                if self.config.get('username') and self.config.get('password'):
                    login_success = self.components['connection'].login(
                        self.config['username'], 
                        self.config['password']
                    )
                    
                    if login_success:
                        self.logger.info("‚úÖ Login realizado com sucesso")
                    else:
                        self.logger.warning("‚ö†Ô∏è Login falhou - continuando sem autentica√ß√£o")
                
                return True
            else:
                self.logger.warning("‚ö†Ô∏è Falha ao inicializar ConnectionManager")
                return False
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erro na conex√£o: {str(e)}")
            return False
    
    def _test_model_loading(self):
        """Testa carregamento de modelos ML"""
        
        try:
            # Verificar diret√≥rio de modelos
            models_dir = self.config['models_dir']
            
            if not os.path.exists(models_dir):
                self.logger.info(f"üìÅ Criando diret√≥rio de modelos: {models_dir}")
                os.makedirs(models_dir, exist_ok=True)
                
                # Gerar modelos de teste se necess√°rio
                self._create_test_models(models_dir)
            
            # Inicializar ModelManager
            self.components['model_manager'] = ModelManager(models_dir)
            
            # Carregar modelos
            self.components['model_manager'].load_models()
            
            # Verificar features requeridas
            features = self.components['model_manager'].get_all_required_features()
            
            self.logger.info(f"‚úÖ Modelos carregados: {len(self.components['model_manager'].models)}")
            self.logger.info(f"üìä Features requeridas: {len(features)}")
            
            # Salvar features para uso posterior
            self.test_data['required_features'] = features
            
            # Log das primeiras 10 features
            if features:
                self.logger.info(f"üîç Primeiras 10 features: {list(features)[:10]}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no carregamento de modelos: {str(e)}")
            raise
    
    def _test_data_structure(self):
        """Testa inicializa√ß√£o da estrutura de dados"""
        
        try:
            # Inicializar TradingDataStructure
            self.components['data_structure'] = TradingDataStructure()
            self.components['data_structure'].initialize_structure()
            
            self.logger.info("‚úÖ Estrutura de dados inicializada")
            
            # Verificar estruturas criadas
            structures = []
            if not self.components['data_structure'].candles.empty:
                structures.append("candles")
            if not self.components['data_structure'].indicators.empty:
                structures.append("indicators")
            if not self.components['data_structure'].features.empty:
                structures.append("features")
            
            self.logger.info(f"üìä Estruturas dispon√≠veis: {structures}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na estrutura de dados: {str(e)}")
            raise
    
    def _test_historical_data_loading(self):
        """Testa carregamento de dados hist√≥ricos"""
        
        try:
            # Inicializar DataLoader
            connection = self.components.get('connection')
            self.components['data_loader'] = DataLoader(connection)
            
            # Tentar carregar dados reais primeiro
            success = False
            
            if connection and connection.connected:
                try:
                    self.logger.info("üì° Tentando carregar dados reais do Profit...")
                    
                    candles = self.components['data_loader'].load_historical_data(
                        ticker=self.config['ticker'],
                        start_date=self.config['start_date'],
                        end_date=self.config['end_date'],
                        period=self.config['candle_period']
                    )
                    
                    if not candles.empty:
                        self.test_data['candles'] = candles
                        success = True
                        self.logger.info(f"‚úÖ Dados reais carregados: {len(candles)} candles")
                        
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Falha em dados reais: {str(e)}")
            
            # Se dados reais falharam, usar dados de teste controlados
            if not success:
                self.logger.info("üìä Gerando dados de teste controlados...")
                candles = self._generate_test_candles()
                self.test_data['candles'] = candles
                self.logger.info(f"‚úÖ Dados de teste gerados: {len(candles)} candles")
            
            # Atualizar estrutura de dados
            self.components['data_structure'].update_candles(self.test_data['candles'])
            
            # Verificar qualidade dos dados
            self._validate_candle_data(self.test_data['candles'])
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no carregamento de dados: {str(e)}")
            raise
    
    def _test_technical_indicators(self):
        """Testa c√°lculo de indicadores t√©cnicos"""
        
        try:
            # Inicializar TechnicalIndicators
            self.components['technical_indicators'] = TechnicalIndicators()
            
            # Calcular indicadores
            candles = self.test_data['candles']
            indicators = self.components['technical_indicators'].calculate_all(candles)
            
            self.test_data['indicators'] = indicators
            
            self.logger.info(f"‚úÖ Indicadores calculados: {len(indicators.columns)} indicadores")
            self.logger.info(f"üìä Dados v√°lidos: {len(indicators)} per√≠odos")
            
            # Verificar indicadores principais
            key_indicators = ['ema_9', 'ema_20', 'rsi_14', 'macd', 'bb_upper', 'atr_14']
            found_indicators = [ind for ind in key_indicators if ind in indicators.columns]
            
            self.logger.info(f"üîç Indicadores chave encontrados: {found_indicators}")
            
            # Atualizar estrutura de dados
            self.components['data_structure'].update_indicators(indicators)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no c√°lculo de indicadores: {str(e)}")
            raise
    
    def _test_ml_features(self):
        """Testa c√°lculo de features ML"""
        
        try:
            # Usar features requeridas pelos modelos
            required_features = self.test_data.get('required_features', [])
            
            # Inicializar MLFeatures
            self.components['ml_features'] = MLFeatures(required_features)
            
            # Calcular features
            candles = self.test_data['candles']
            indicators = self.test_data['indicators']
            
            # Simular microestrutura se n√£o dispon√≠vel
            microstructure = self._generate_microstructure_data(candles)
            
            features = self.components['ml_features'].calculate_all(
                candles, microstructure, indicators
            )
            
            self.test_data['features'] = features
            
            self.logger.info(f"‚úÖ Features ML calculadas: {len(features.columns)} features")
            self.logger.info(f"üìä Dados v√°lidos: {len(features)} per√≠odos")
            
            # Verificar features importantes
            if required_features:
                found_features = [f for f in required_features if f in features.columns]
                missing_features = [f for f in required_features if f not in features.columns]
                
                self.logger.info(f"üîç Features encontradas: {len(found_features)}/{len(required_features)}")
                
                if missing_features:
                    self.logger.warning(f"‚ö†Ô∏è Features faltantes: {missing_features[:5]}...")
            
            # Atualizar estrutura de dados
            self.components['data_structure'].update_features(features)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no c√°lculo de features ML: {str(e)}")
            raise
    
    def _test_feature_engine(self):
        """Testa o motor de features completo"""
        
        try:
            # Usar features requeridas pelos modelos
            required_features = self.test_data.get('required_features', [])
            
            # Inicializar FeatureEngine
            self.components['feature_engine'] = FeatureEngine(required_features)
            
            # Calcular todas as features
            result = self.components['feature_engine'].calculate(
                self.components['data_structure'],
                force_recalculate=True,
                use_advanced=True
            )
            
            self.test_data['all_features'] = result
            
            self.logger.info("‚úÖ FeatureEngine executado com sucesso")
            
            # Verificar resultados
            for key, df in result.items():
                if isinstance(df, pd.DataFrame):
                    self.logger.info(f"üìä {key}: {df.shape[1]} colunas, {df.shape[0]} linhas")
                    
                    # Verificar qualidade dos dados
                    nan_ratio = df.isna().sum().sum() / (df.shape[0] * df.shape[1])
                    self.logger.info(f"üîç Taxa de NaN em {key}: {nan_ratio:.2%}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no FeatureEngine: {str(e)}")
            # N√£o falhar o teste se o FeatureEngine tiver problemas espec√≠ficos
            self.logger.warning("‚ö†Ô∏è Continuando teste sem FeatureEngine avan√ßado")
    
    def _test_data_pipeline(self):
        """Testa pipeline de processamento de dados"""
        
        try:
            # Inicializar DataPipeline
            self.components['data_pipeline'] = DataPipeline()
            
            # Configurar pipeline
            config = {
                'min_candles': 50,
                'required_features': self.test_data.get('required_features', []),
                'validate_data': True
            }
            
            self.components['data_pipeline'].configure(config)
            
            # Processar dados hist√≥ricos
            processed_data = self.components['data_pipeline'].process_historical_data(
                self.components['data_structure']
            )
            
            self.test_data['processed_data'] = processed_data
            
            self.logger.info("‚úÖ Pipeline de dados executado com sucesso")
            self.logger.info(f"üìä Dados processados: {len(processed_data)} registros")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no pipeline de dados: {str(e)}")
            raise
    
    def _test_predictions(self):
        """Testa sistema de predi√ß√µes"""
        
        try:
            # Inicializar PredictionEngine
            model_manager = self.components['model_manager']
            self.components['prediction_engine'] = PredictionEngine(model_manager)
            
            # Inicializar MLCoordinator
            feature_engine = self.components.get('feature_engine')
            self.components['ml_coordinator'] = MLCoordinator(
                model_manager, feature_engine, self.components['prediction_engine'], None
            )
            
            # Fazer predi√ß√£o com dados mais recentes
            recent_data = self._get_recent_data_sample()
            
            prediction_result = self.components['ml_coordinator'].process_prediction_request(
                recent_data
            )
            
            self.test_data['prediction'] = prediction_result
            
            self.logger.info("‚úÖ Sistema de predi√ß√µes executado")
            self.logger.info(f"üéØ Resultado: {prediction_result}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro no sistema de predi√ß√µes: {str(e)}")
            # Criar predi√ß√£o mock para continuar teste
            self.test_data['prediction'] = {
                'regime': 'trend_up',
                'confidence': 0.75,
                'trade_decision': 'BUY',
                'can_trade': True,
                'risk_reward_target': 2.0
            }
            self.logger.warning("‚ö†Ô∏è Usando predi√ß√£o mock para continuar teste")
    
    def _test_signal_generation(self):
        """Testa gera√ß√£o de sinais de trading"""
        
        try:
            # Inicializar SignalGenerator
            self.components['signal_generator'] = SignalGenerator()
            
            # Gerar sinal baseado na predi√ß√£o
            prediction = self.test_data['prediction']
            market_data = self._get_current_market_data()
            
            signal = self.components['signal_generator'].generate_regime_based_signal(
                prediction, market_data
            )
            
            self.test_data['signal'] = signal
            
            self.logger.info("‚úÖ Sinal de trading gerado")
            self.logger.info(f"üì¢ Sinal: {signal}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na gera√ß√£o de sinais: {str(e)}")
            raise
    
    def _test_risk_management(self):
        """Testa sistema de gest√£o de risco"""
        
        try:
            # Inicializar RiskManager
            risk_config = {
                'max_position_size': 1,
                'max_daily_loss': 1000,
                'max_trades_per_day': 10
            }
            
            self.components['risk_manager'] = RiskManager(risk_config)
            
            # Avaliar risco do sinal
            signal = self.test_data['signal']
            account_info = {'balance': 100000, 'available': 95000}
            
            risk_assessment = self.components['risk_manager'].assess_trade_risk(
                signal, account_info
            )
            
            self.test_data['risk_assessment'] = risk_assessment
            
            self.logger.info("‚úÖ Gest√£o de risco executada")
            self.logger.info(f"üõ°Ô∏è Avalia√ß√£o: {risk_assessment}")
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro na gest√£o de risco: {str(e)}")
            raise
    
    def _generate_final_report(self):
        """Gera relat√≥rio final do teste"""
        
        self.logger.info("üìã RELAT√ìRIO FINAL DO TESTE")
        self.logger.info("=" * 60)
        
        # Componentes testados
        self.logger.info("üîß COMPONENTES TESTADOS:")
        for name, component in self.components.items():
            status = "‚úÖ OK" if component is not None else "‚ùå FALHA"
            self.logger.info(f"  {name}: {status}")
        
        # Dados processados
        self.logger.info("\nüìä DADOS PROCESSADOS:")
        if 'candles' in self.test_data:
            candles = self.test_data['candles']
            self.logger.info(f"  Candles: {len(candles)} registros")
            self.logger.info(f"  Per√≠odo: {candles.index[0]} at√© {candles.index[-1]}")
        
        if 'indicators' in self.test_data:
            indicators = self.test_data['indicators']
            self.logger.info(f"  Indicadores: {len(indicators.columns)} calculados")
        
        if 'features' in self.test_data:
            features = self.test_data['features']
            self.logger.info(f"  Features ML: {len(features.columns)} calculadas")
        
        # Resultado da predi√ß√£o
        self.logger.info("\nüéØ RESULTADO DA PREDI√á√ÉO:")
        if 'prediction' in self.test_data:
            pred = self.test_data['prediction']
            self.logger.info(f"  Regime: {pred.get('regime', 'N/A')}")
            self.logger.info(f"  Confian√ßa: {pred.get('confidence', 0):.2f}")
            self.logger.info(f"  Decis√£o: {pred.get('trade_decision', 'N/A')}")
        
        # Sinal final
        self.logger.info("\nüì¢ SINAL FINAL:")
        if 'signal' in self.test_data:
            signal = self.test_data['signal']
            self.logger.info(f"  A√ß√£o: {signal.get('action', 'N/A')}")
            self.logger.info(f"  Pre√ßo: {signal.get('price', 0)}")
            self.logger.info(f"  Stop: {signal.get('stop', 0)}")
            self.logger.info(f"  Target: {signal.get('target', 0)}")
        
        self.logger.info("\n" + "=" * 60)
        self.logger.info("‚úÖ TESTE COMPLETO FINALIZADO!")
    
    # M√©todos auxiliares de gera√ß√£o de dados
    
    def _create_test_models(self, models_dir):
        """Cria modelos de teste se necess√°rio"""
        
        # Importar script de cria√ß√£o de modelos mock
        import sys
        tests_path = os.path.join(os.path.dirname(__file__), '..', 'tests', 'mock_data')
        
        if os.path.exists(os.path.join(tests_path, 'create_mock_models.py')):
            sys.path.insert(0, tests_path)
            
            try:
                from create_mock_models import create_mock_models_ensemble
                create_mock_models_ensemble(models_dir)
                self.logger.info(f"‚úÖ Modelos de teste criados em {models_dir}")
            except ImportError:
                self.logger.warning("‚ö†Ô∏è Script de cria√ß√£o de modelos n√£o encontrado")
    
    def _generate_test_candles(self) -> pd.DataFrame:
        """Gera dados de candles para teste controlado"""
        
        # Per√≠odo de teste
        start_date = self.config['start_date']
        end_date = self.config['end_date']
        
        # Gerar √≠ndice de tempo (apenas hor√°rio de mercado)
        dates = pd.bdate_range(start_date, end_date, freq='1min')
        
        # Filtrar hor√°rio de mercado (9:00 - 18:00)
        market_times = []
        for date in dates:
            if 9 <= date.hour <= 17:  # Hor√°rio de mercado
                market_times.append(date)
        
        # Pegar apenas uma amostra para teste
        market_times = market_times[:2000]  # √öltimos 2000 minutos
        
        # Pre√ßo inicial realista para WDO
        initial_price = 130000  # Aproximadamente 130.000 pontos
        
        # Gerar s√©rie de pre√ßos com movimento browniano
        np.random.seed(42)  # Para reprodutibilidade
        
        returns = np.random.normal(0, 0.001, len(market_times))  # Retornos pequenos
        returns[0] = 0
        
        # Calcular pre√ßos
        prices = [initial_price]
        for i in range(1, len(market_times)):
            new_price = prices[-1] * (1 + returns[i])
            prices.append(new_price)
        
        # Criar OHLCV
        candles_data = []
        
        for i, (timestamp, close) in enumerate(zip(market_times, prices)):
            # Simular OHLC baseado no close
            volatility = close * 0.0005  # 0.05% de volatilidade
            
            high = close + np.random.uniform(0, volatility)
            low = close - np.random.uniform(0, volatility)
            
            if i == 0:
                open_price = close
            else:
                open_price = prices[i-1]
            
            # Volume realista
            volume = np.random.randint(50, 500)
            
            candles_data.append({
                'open': open_price,
                'high': max(open_price, high, close, low),
                'low': min(open_price, high, close, low),
                'close': close,
                'volume': volume
            })
        
        # Criar DataFrame
        df = pd.DataFrame(candles_data, index=market_times)
        
        # Validar dados
        assert (df['high'] >= df['low']).all(), "High deve ser >= Low"
        assert (df['high'] >= df['open']).all(), "High deve ser >= Open"
        assert (df['high'] >= df['close']).all(), "High deve ser >= Close"
        assert (df['low'] <= df['open']).all(), "Low deve ser <= Open"
        assert (df['low'] <= df['close']).all(), "Low deve ser <= Close"
        assert (df['volume'] > 0).all(), "Volume deve ser positivo"
        
        return df
    
    def _generate_microstructure_data(self, candles: pd.DataFrame) -> pd.DataFrame:
        """Gera dados de microestrutura simulados"""
        
        micro_data = []
        
        for idx, candle in candles.iterrows():
            # Simular volume de compra/venda baseado no movimento
            total_volume = candle['volume']
            
            price_change = candle['close'] - candle['open']
            
            if price_change > 0:
                # Movimento para cima - mais volume de compra
                buy_ratio = 0.6 + 0.2 * np.random.random()
            elif price_change < 0:
                # Movimento para baixo - mais volume de venda
                buy_ratio = 0.2 + 0.2 * np.random.random()
            else:
                # Sem movimento - equilibrado
                buy_ratio = 0.45 + 0.1 * np.random.random()
            
            buy_volume = int(total_volume * buy_ratio)
            sell_volume = total_volume - buy_volume
            
            # Simular n√∫mero de trades
            buy_trades = max(1, int(buy_volume / 20))
            sell_trades = max(1, int(sell_volume / 20))
            
            micro_data.append({
                'buy_volume': buy_volume,
                'sell_volume': sell_volume,
                'buy_trades': buy_trades,
                'sell_trades': sell_trades
            })
        
        return pd.DataFrame(micro_data, index=candles.index)
    
    def _validate_candle_data(self, candles: pd.DataFrame):
        """Valida qualidade dos dados de candle"""
        
        # Verifica√ß√µes b√°sicas
        required_cols = ['open', 'high', 'low', 'close', 'volume']
        missing_cols = [col for col in required_cols if col not in candles.columns]
        
        if missing_cols:
            raise ValueError(f"Colunas faltantes: {missing_cols}")
        
        # Verificar NaN
        nan_count = candles.isna().sum().sum()
        if nan_count > 0:
            self.logger.warning(f"‚ö†Ô∏è {nan_count} valores NaN encontrados nos dados")
        
        # Verificar consist√™ncia OHLC
        invalid_high = (candles['high'] < candles['open']) | (candles['high'] < candles['close']) | (candles['high'] < candles['low'])
        invalid_low = (candles['low'] > candles['open']) | (candles['low'] > candles['close']) | (candles['low'] > candles['high'])
        
        if invalid_high.any():
            self.logger.error(f"‚ùå {invalid_high.sum()} registros com High inv√°lido")
        
        if invalid_low.any():
            self.logger.error(f"‚ùå {invalid_low.sum()} registros com Low inv√°lido")
        
        # Verificar volume
        if (candles['volume'] <= 0).any():
            self.logger.error("‚ùå Volume zero ou negativo encontrado")
        
        self.logger.info("‚úÖ Valida√ß√£o de dados de candle conclu√≠da")
    
    def _get_recent_data_sample(self) -> Dict[str, Any]:
        """Retorna amostra de dados recentes para predi√ß√£o"""
        
        # Pegar √∫ltimos 50 registros (t√≠pico para ML)
        sample_size = min(50, len(self.test_data['candles']))
        
        return {
            'candles': self.test_data['candles'].tail(sample_size),
            'indicators': self.test_data.get('indicators', pd.DataFrame()).tail(sample_size),
            'features': self.test_data.get('features', pd.DataFrame()).tail(sample_size)
        }
    
    def _get_current_market_data(self) -> Dict[str, Any]:
        """Retorna dados de mercado atuais simulados"""
        
        latest_candle = self.test_data['candles'].iloc[-1]
        
        return {
            'current_price': latest_candle['close'],
            'bid': latest_candle['close'] - 5,  # 5 pontos abaixo
            'ask': latest_candle['close'] + 5,  # 5 pontos acima
            'volume': latest_candle['volume'],
            'timestamp': latest_candle.name
        }
    
    def _cleanup(self):
        """Limpa recursos do teste"""
        
        try:
            # Fechar conex√µes se existirem
            if 'connection' in self.components and self.components['connection']:
                if hasattr(self.components['connection'], 'disconnect'):
                    self.components['connection'].disconnect()
            
            # Limpar diret√≥rio tempor√°rio
            import shutil
            if os.path.exists(self.temp_dir):
                shutil.rmtree(self.temp_dir)
                
            self.logger.info("üßπ Limpeza conclu√≠da")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erro na limpeza: {str(e)}")

def main():
    """Fun√ß√£o principal para executar o teste"""
    
    # Configurar logging global
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Criar e executar teste
    tester = SystemTester()
    tester.run_complete_test()

if __name__ == "__main__":
    main()
