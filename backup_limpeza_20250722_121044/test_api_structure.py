#!/usr/bin/env python3
"""
Teste estrutural da API de dados hist√≥ricos
Verifica se as corre√ß√µes na API est√£o corretas sem fazer conex√£o real
"""

import sys
import os
import logging

# Adicionar src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_api_structure():
    """Testa a estrutura das corre√ß√µes da API"""
    
    print("=== TESTE ESTRUTURAL DA API ===")
    print()
    
    try:
        # 1. Testar imports
        print("1. Testando imports...")
        from connection_manager import ConnectionManager
        print("   ‚úÖ ConnectionManager importado")
        
        # 2. Testar inicializa√ß√£o 
        print("2. Testando inicializa√ß√£o...")
        dll_path = r"C:\fake\path\ProfitDLL.dll"  # Path fake
        connection = ConnectionManager(dll_path)
        print("   ‚úÖ ConnectionManager inicializado")
        
        # 3. Verificar se os atributos necess√°rios existem
        print("3. Verificando atributos...")
        assert hasattr(connection, '_historical_data_count'), "‚ùå _historical_data_count missing"
        assert connection._historical_data_count == 0, "‚ùå _historical_data_count not initialized"
        print("   ‚úÖ _historical_data_count inicializado corretamente")
        
        # 4. Verificar se m√©todos existem
        print("4. Verificando m√©todos...")
        assert hasattr(connection, 'wait_for_historical_data'), "‚ùå wait_for_historical_data missing"
        assert hasattr(connection, 'request_historical_data'), "‚ùå request_historical_data missing"  
        assert hasattr(connection, 'request_historical_data_alternative'), "‚ùå request_historical_data_alternative missing"
        print("   ‚úÖ M√©todos necess√°rios existem")
        
        # 5. Verificar assinaturas de m√©todos
        print("5. Verificando assinaturas...")
        import inspect
        
        # wait_for_historical_data
        sig = inspect.signature(connection.wait_for_historical_data)
        assert 'timeout_seconds' in sig.parameters, "‚ùå timeout_seconds param missing"
        print("   ‚úÖ wait_for_historical_data tem par√¢metro timeout_seconds")
        
        # request_historical_data
        sig = inspect.signature(connection.request_historical_data) 
        assert 'ticker' in sig.parameters, "‚ùå ticker param missing"
        assert 'start_date' in sig.parameters, "‚ùå start_date param missing"
        assert 'end_date' in sig.parameters, "‚ùå end_date param missing"
        print("   ‚úÖ request_historical_data tem par√¢metros corretos")
        
        # 6. Testar logic b√°sica do wait_for_historical_data
        print("6. Testando l√≥gica b√°sica...")
        
        # Simular que n√£o h√° dados
        connection._historical_data_count = 0
        # Chamar com timeout muito baixo deveria retornar False
        result = connection.wait_for_historical_data(timeout_seconds=1)
        assert result is False, "‚ùå Deveria retornar False sem dados"
        print("   ‚úÖ wait_for_historical_data retorna False sem dados")
        
        # Simular que h√° dados
        connection._historical_data_count = 100
        # Chamar deveria retornar True rapidamente (dados est√°veis)
        result = connection.wait_for_historical_data(timeout_seconds=3)
        assert result is True, "‚ùå Deveria retornar True com dados"
        print("   ‚úÖ wait_for_historical_data retorna True com dados")
        
        print()
        print("üéâ TODOS OS TESTES ESTRUTURAIS PASSARAM!")
        print()
        print("‚úÖ As corre√ß√µes implementadas est√£o estruturalmente corretas:")
        print("   - Contador de dados hist√≥ricos funcional")
        print("   - M√©todo de espera implementado")
        print("   - APIs de requisi√ß√£o existem") 
        print("   - Par√¢metros corretos")
        print()
        print("üöÄ PRONTO para testar com conex√£o real!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå FALHA NO TESTE: {e}")
        import traceback
        print(f"Stack trace: {traceback.format_exc()}")
        return False

def test_trading_system_integration():
    """Testa se o trading system pode usar as corre√ß√µes"""
    
    print("=== TESTE INTEGRA√á√ÉO TRADING SYSTEM ===")
    print()
    
    try:
        # Importar trading system
        from trading_system import TradingSystem
        print("‚úÖ TradingSystem importado")
        
        # Verificar se m√©todo existe
        assert hasattr(TradingSystem, '_load_historical_data_safe'), "‚ùå _load_historical_data_safe missing"
        print("‚úÖ _load_historical_data_safe existe")
        
        # Testar c√≥digo n√£o quebra
        config = {'historical_days': 5}
        # N√£o vamos instanciar completamente, apenas testar estrutura
        print("‚úÖ Integra√ß√£o estruturalmente compat√≠vel")
        
        return True
        
    except Exception as e:
        print(f"‚ùå FALHA INTEGRA√á√ÉO: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Executando testes estruturais...")
    print()
    
    test1 = test_api_structure()
    test2 = test_trading_system_integration()
    
    print()
    if test1 and test2:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print()
        print("üìã PR√ìXIMOS PASSOS:")
        print("1. Verificar credenciais no arquivo .env")
        print("2. Executar: python src/main.py")
        print("3. Observar logs para:")
        print("   - 'üìà DADO HIST√ìRICO RECEBIDO'")  
        print("   - '‚è≥ Download hist√≥rico WDOQ25: X%'")
        print("   - '‚úÖ Download hist√≥rico de WDOQ25 COMPLETO!'")
        print("   - 'üìä X dados hist√≥ricos recebidos...'")
        
        sys.exit(0)
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        sys.exit(1)
