#!/usr/bin/env python3
"""
üñ•Ô∏è LAUNCHER GUI - ML TRADING v2.0
=================================
Inicia sistema com GUI garantido
"""

import sys
import os
import time
import threading
from datetime import datetime

# Adicionar diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def start_with_gui():
    """Inicia sistema com GUI garantido"""
    print("üöÄ INICIANDO SISTEMA COM GUI GARANTIDO")
    print("="*50)
    print(f"Timestamp: {datetime.now().strftime('%H:%M:%S')}")
    print("")
    
    try:
        # Import com fallback
        try:
            from trading_system import TradingSystem
            from trading_monitor_gui import TradingMonitorGUI
            print("‚úÖ M√≥dulos importados com sucesso")
        except ImportError as e:
            print(f"‚ùå Erro no import: {e}")
            return False
        
        # Configura√ß√£o com GUI for√ßado
        config = {
            'dll_path': os.getenv('PROFIT_DLL_PATH', ''),
            'username': os.getenv('PROFIT_USER', ''),
            'password': os.getenv('PROFIT_PASSWORD', ''),
            'account_id': os.getenv('PROFIT_ACCOUNT_ID', ''),
            'broker_id': os.getenv('PROFIT_BROKER_ID', ''),
            'trading_password': os.getenv('PROFIT_TRADING_PASSWORD', ''),
            'key': os.getenv('PROFIT_KEY', ''),
            'models_dir': os.getenv('MODELS_DIR', ''),
            'ml_interval': int(os.getenv('ML_INTERVAL', 15)),
            'use_gui': True,  # FOR√áAR GUI
            'historical_days': int(os.getenv('HISTORICAL_DAYS', 10))
        }
        
        print("‚öôÔ∏è CONFIGURA√á√ïES:")
        print(f"   ‚Ä¢ GUI: {config['use_gui']}")
        print(f"   ‚Ä¢ ML_INTERVAL: {config['ml_interval']}s")
        print("")
        
        # Criar sistema
        print("üîß Criando sistema de trading...")
        system = TradingSystem(config)
        
        # Inicializar
        print("üîÑ Inicializando sistema...")
        if not system.initialize():
            print("‚ùå Falha na inicializa√ß√£o")
            return False
            
        print("‚úÖ Sistema inicializado")
        
        # FOR√áAR CRIA√á√ÉO DO GUI
        print("üñ•Ô∏è FOR√áANDO CRIA√á√ÉO DO GUI...")
        try:
            gui = TradingMonitorGUI(system)
            print("‚úÖ GUI criado com sucesso")
            
            # Iniciar GUI em thread separada
            def run_gui():
                try:
                    gui.run()
                except Exception as e:
                    print(f"‚ùå Erro no GUI: {e}")
                    
            gui_thread = threading.Thread(target=run_gui, daemon=False)
            gui_thread.start()
            print("‚úÖ GUI iniciado em thread")
            
            time.sleep(2)  # Aguardar GUI inicializar
            
        except Exception as e:
            print(f"‚ùå Erro criando GUI: {e}")
            print("‚ö†Ô∏è Continuando sem GUI...")
        
        # Iniciar sistema
        print("‚ñ∂Ô∏è Iniciando opera√ß√£o...")
        if system.start():
            print("‚úÖ Sistema operacional!")
            
            # Manter vivo
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Parando sistema...")
                system.stop()
        else:
            print("‚ùå Falha ao iniciar sistema")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        return False
        
    return True

if __name__ == "__main__":
    start_with_gui()
