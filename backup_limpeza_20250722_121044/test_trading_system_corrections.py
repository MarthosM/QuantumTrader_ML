#!/usr/bin/env python3
"""
Teste das Corre√ß√µes do TradingSystem
Verifica se as implementa√ß√µes cr√≠ticas est√£o funcionais
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_trading_system_corrections():
    """Testa as corre√ß√µes implementadas no TradingSystem"""
    print("üß™ TESTE: Corre√ß√µes TradingSystem")
    print("="*60)
    
    try:
        # Importar sem erro
        from trading_system import TradingSystem
        
        # Configura√ß√£o b√°sica
        config = {
            'dll_path': 'test.dll',
            'username': 'test',
            'password': 'test',
            'models_dir': 'test_models',
            'ticker': 'WDOQ25'
        }
        
        # Criar inst√¢ncia
        trading_system = TradingSystem(config)
        print("‚úÖ TradingSystem criado com sucesso")
        
        # Testar se ProductionDataValidator foi integrado
        if hasattr(trading_system, 'production_validator'):
            print("‚úÖ ProductionDataValidator integrado")
        else:
            print("‚ùå ProductionDataValidator n√£o encontrado")
            
        # Testar m√©todo de valida√ß√£o
        if hasattr(trading_system, '_validate_production_data'):
            print("‚úÖ M√©todo _validate_production_data implementado")
        else:
            print("‚ùå M√©todo _validate_production_data n√£o encontrado")
        
        # Testar m√©todo de execu√ß√£o segura
        if hasattr(trading_system, '_execute_order_safely'):
            print("‚úÖ M√©todo _execute_order_safely implementado")
        else:
            print("‚ùå M√©todo _execute_order_safely n√£o encontrado")
            
        # Testar detec√ß√£o de regime
        if hasattr(trading_system, '_detect_market_regime'):
            print("‚úÖ M√©todo _detect_market_regime implementado")
            
            # Criar dados de teste
            import pandas as pd
            import numpy as np
            
            # Simular dados de mercado
            data = {
                'open': np.random.uniform(5000, 5100, 60),
                'high': np.random.uniform(5000, 5100, 60),
                'low': np.random.uniform(5000, 5100, 60),
                'close': np.random.uniform(5000, 5100, 60)
            }
            
            market_data = pd.DataFrame(data)
            
            # Testar detec√ß√£o
            regime = trading_system._detect_market_regime(market_data)
            
            # Regimes v√°lidos esperados
            valid_regimes = ['trend_up', 'trend_down', 'ranging', 'high_volatility', 'undefined']
            
            if regime in valid_regimes:
                print(f"‚úÖ Detec√ß√£o de regime funcionando: {regime}")
            else:
                print(f"‚ùå Regime inv√°lido detectado: {regime}")
                
        else:
            print("‚ùå M√©todo _detect_market_regime n√£o encontrado")
        
        # Testar m√©todo de aplica√ß√£o de otimiza√ß√£o
        if hasattr(trading_system, '_apply_optimization_results'):
            print("‚úÖ M√©todo _apply_optimization_results implementado")
            
            # Testar com dados mock
            test_results = {
                'features': {
                    'changed': True,
                    'selected_features': ['close', 'volume', 'rsi']
                }
            }
            
            try:
                trading_system._apply_optimization_results(test_results)
                print("‚úÖ _apply_optimization_results executado sem erro")
            except Exception as e:
                print(f"‚ö†Ô∏è _apply_optimization_results executou com aviso: {e}")
        else:
            print("‚ùå M√©todo _apply_optimization_results n√£o encontrado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_production_safety():
    """Testa se as prote√ß√µes de produ√ß√£o est√£o funcionando"""
    print(f"\nüõ°Ô∏è TESTE: Prote√ß√µes de Produ√ß√£o")
    print("="*60)
    
    # Salvar estado atual
    current_env = os.environ.get('TRADING_ENV', 'development')
    
    try:
        from trading_system import TradingSystem
        
        config = {
            'dll_path': 'test.dll',
            'username': 'test', 
            'password': 'test',
            'models_dir': 'test_models'
        }
        
        trading_system = TradingSystem(config)
        
        # Testar em modo desenvolvimento
        os.environ['TRADING_ENV'] = 'development'
        print("üß™ Testando modo DEVELOPMENT...")
        
        try:
            signal = {
                'action': 'buy',
                'price': 5000,
                'position_size': 1,
                'stop_loss': 4995,
                'take_profit': 5010
            }
            
            # Deve funcionar em desenvolvimento
            trading_system._simulate_order_execution(signal)
            print("‚úÖ Simula√ß√£o permitida em DEVELOPMENT")
            
        except Exception as e:
            print(f"‚ùå Erro inesperado em development: {e}")
        
        # Testar em modo produ√ß√£o
        os.environ['TRADING_ENV'] = 'production'
        print("üö® Testando modo PRODUCTION...")
        
        try:
            # Deve falhar em produ√ß√£o
            trading_system._simulate_order_execution(signal)
            print("‚ùå PERIGO: Simula√ß√£o permitida em PRODUCTION!")
            
        except RuntimeError as e:
            if "SIMULA√á√ÉO CHAMADA EM PRODU√á√ÉO" in str(e):
                print("‚úÖ Simula√ß√£o corretamente bloqueada em PRODUCTION")
            else:
                print(f"‚ö†Ô∏è Erro diferente do esperado: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro n√£o esperado: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste de produ√ß√£o: {e}")
        return False
        
    finally:
        # Restaurar estado
        os.environ['TRADING_ENV'] = current_env

def main():
    """Executa todos os testes das corre√ß√µes"""
    print("üß™ TESTE COMPLETO - CORRE√á√ïES TRADING SYSTEM")
    print("="*70)
    
    results = []
    
    # Teste das implementa√ß√µes
    result1 = test_trading_system_corrections()
    results.append(("Corre√ß√µes Implementadas", result1))
    
    # Teste de seguran√ßa
    result2 = test_production_safety()  
    results.append(("Prote√ß√µes de Produ√ß√£o", result2))
    
    # Resultado final
    print(f"\n" + "="*70)
    print("üìã RESULTADO DOS TESTES")
    print("="*70)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"   {test_name:<25}: {status}")
    
    print(f"\nüéØ RESULTADO FINAL: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ CORRE√á√ïES IMPLEMENTADAS COM SUCESSO!")
        print("‚úÖ M√©todos cr√≠ticos completados")
        print("‚úÖ Prote√ß√µes de produ√ß√£o funcionando")
        print("‚úÖ ProductionDataValidator integrado")
        print("‚úÖ Execu√ß√£o segura implementada")
    else:
        print("‚ö†Ô∏è Algumas corre√ß√µes precisam de ajustes")
    
    print(f"\nüö® PR√ìXIMOS PASSOS:")
    print("1. Implementar place_order no ConnectionManager")
    print("2. Completar m√©todos de atualiza√ß√£o nos managers")
    print("3. Testes com dados reais")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
