#!/usr/bin/env python3
"""
Corre√ß√£o do erro de threading do GUI
Sistema de trading ML v2.0

O problema: GUI executando em thread daemon causa erro "main thread is not in main loop"
Solu√ß√£o: Executar GUI na thread principal e sistema em threads separadas
"""

import os
import sys
import logging
import threading
import time
from typing import Optional

# Adicionar src ao path
project_root = os.path.dirname(os.path.abspath(__file__))
src_path = os.path.join(project_root, 'src')
if src_path not in sys.path:
    sys.path.insert(0, src_path)

class GUIThreadingFix:
    """
    Classe para corrigir problemas de threading do GUI
    """
    
    def __init__(self):
        self.logger = logging.getLogger('GUIFix')
        
    def apply_trading_system_fix(self):
        """Aplica corre√ß√£o no trading_system.py"""
        trading_system_path = os.path.join(src_path, 'trading_system.py')
        
        if not os.path.exists(trading_system_path):
            self.logger.error("Arquivo trading_system.py n√£o encontrado")
            return False
            
        try:
            with open(trading_system_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Localizar se√ß√£o do GUI
            gui_section_start = content.find("# 7. Iniciar monitor GUI se habilitado")
            if gui_section_start == -1:
                self.logger.error("Se√ß√£o do GUI n√£o encontrada")
                return False
                
            # Localizar o final da se√ß√£o do GUI
            main_loop_start = content.find("# 8. Entrar no loop principal", gui_section_start)
            if main_loop_start == -1:
                self.logger.error("In√≠cio do loop principal n√£o encontrado")
                return False
                
            # Extrair se√ß√£o atual do GUI
            gui_section = content[gui_section_start:main_loop_start]
            
            # Nova implementa√ß√£o do GUI corrigida
            new_gui_section = '''            # 7. Iniciar monitor GUI se habilitado
            if self.use_gui:
                self.logger.info("Iniciando monitor visual...")
                try:
                    from trading_monitor_gui import create_monitor_gui
                    self.monitor = create_monitor_gui(self)
                    
                    # üîß CORRE√á√ÉO: GUI deve rodar na thread principal
                    # Sistema roda em background, GUI na main thread
                    self.logger.info("‚úì Monitor GUI configurado para thread principal")
                    
                    # Armazenar refer√™ncia para controle do GUI
                    self._gui_ready = True
                    
                except Exception as e:
                    self.logger.warning(f"Erro configurando monitor GUI: {e}")
                    self.logger.info("Sistema continuar√° sem monitor visual")
                    self.monitor = None
                    
            # 7.5. Se GUI habilitado, configurar execu√ß√£o na thread principal
            if self.use_gui and self.monitor:
                self.logger.info("Sistema ser√° executado em background thread")
                
                # Sistema roda em thread separada
                system_thread = threading.Thread(
                    target=self._main_loop_background,
                    daemon=False,  # N√£o daemon para controle adequado
                    name="TradingSystem"
                )
                system_thread.start()
                
                # GUI roda na thread principal
                self.logger.info("Iniciando GUI na thread principal...")
                try:
                    self.monitor.run()  # Bloqueia na thread principal
                finally:
                    # Cleanup quando GUI fechar
                    self.logger.info("GUI fechado, parando sistema...")
                    self.stop()
                    if system_thread.is_alive():
                        system_thread.join(timeout=5)
                        
                return True
            else:
                # Sem GUI - comportamento original
                
'''
            
            # Substituir se√ß√£o do GUI
            new_content = content[:gui_section_start] + new_gui_section + content[main_loop_start:]
            
            # Backup do arquivo original
            backup_path = trading_system_path + '.backup_gui_fix'
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(content)
            self.logger.info(f"Backup criado: {backup_path}")
            
            # Salvar nova vers√£o
            with open(trading_system_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            self.logger.info("‚úì Corre√ß√£o aplicada no trading_system.py")
            return True
            
        except Exception as e:
            self.logger.error(f"Erro aplicando corre√ß√£o: {e}")
            return False
            
    def add_background_loop_method(self):
        """Adiciona m√©todo _main_loop_background ao trading_system.py"""
        trading_system_path = os.path.join(src_path, 'trading_system.py')
        
        try:
            with open(trading_system_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Localizar m√©todo _main_loop original
            main_loop_start = content.find("def _main_loop(self):")
            if main_loop_start == -1:
                self.logger.error("M√©todo _main_loop n√£o encontrado")
                return False
                
            # Localizar final do m√©todo _main_loop
            # Procurar pr√≥xima defini√ß√£o de m√©todo
            next_method = content.find("\n    def ", main_loop_start + 1)
            if next_method == -1:
                # Se n√£o encontrar, procurar final da classe
                next_method = content.find("\nclass ", main_loop_start + 1)
                if next_method == -1:
                    # Se n√£o encontrar, fim do arquivo
                    next_method = len(content)
                    
            main_loop_end = next_method
            
            # M√©todo background para ser inserido
            background_method = '''
    def _main_loop_background(self):
        """
        Loop principal executado em background quando GUI est√° ativo
        Vers√£o modificada do _main_loop original para threading
        """
        self.logger.info("Iniciando loop principal em background thread...")
        
        try:
            # Loop principal do sistema
            self._main_loop()
            
        except Exception as e:
            self.logger.error(f"Erro no loop background: {e}", exc_info=True)
        finally:
            self.logger.info("Loop background finalizado")
'''
            
            # Inserir m√©todo background antes do pr√≥ximo m√©todo
            new_content = content[:main_loop_end] + background_method + content[main_loop_end:]
            
            # Salvar
            with open(trading_system_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
                
            self.logger.info("‚úì M√©todo _main_loop_background adicionado")
            return True
            
        except Exception as e:
            self.logger.error(f"Erro adicionando m√©todo background: {e}")
            return False
            
    def fix_gui_monitor_threading(self):
        """Corrige problemas de threading no monitor GUI"""
        gui_path = os.path.join(src_path, 'trading_monitor_gui.py')
        
        if not os.path.exists(gui_path):
            self.logger.error("Arquivo trading_monitor_gui.py n√£o encontrado")
            return False
            
        try:
            with open(gui_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Localizar m√©todo run
            run_method_start = content.find("def run(self):")
            if run_method_start == -1:
                self.logger.error("M√©todo run n√£o encontrado no GUI")
                return False
                
            # Localizar final do m√©todo run
            next_method = content.find("\n\ndef ", run_method_start + 1)
            if next_method == -1:
                next_method = len(content)
                
            # Nova implementa√ß√£o do m√©todo run
            new_run_method = '''    def run(self):
        """
        Inicia a interface gr√°fica na thread principal
        üîß CORRE√á√ÉO: Garante execu√ß√£o na thread principal
        """
        self.logger = logging.getLogger('GUI')
        self.logger.info("Iniciando GUI na thread principal...")
        
        try:
            # Configurar protocolo de fechamento
            self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
            
            # Iniciar monitoramento automaticamente se sistema rodando
            if hasattr(self.trading_system, 'is_running') and self.trading_system.is_running:
                self.root.after(1000, self.start_monitoring)  # Delay para garantir inicializa√ß√£o
                
            # Executar mainloop na thread principal
            self.root.mainloop()
            
        except Exception as e:
            self.logger.error(f"Erro executando GUI: {e}", exc_info=True)
        finally:
            self.logger.info("GUI finalizado")
'''
            
            # Substituir m√©todo run
            new_content = content[:run_method_start] + new_run_method + content[next_method:]
            
            # Backup
            backup_path = gui_path + '.backup_gui_fix'
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(content)
                
            # Salvar nova vers√£o
            with open(gui_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
                
            self.logger.info("‚úì Corre√ß√£o aplicada no trading_monitor_gui.py")
            return True
            
        except Exception as e:
            self.logger.error(f"Erro corrigindo GUI: {e}")
            return False
            
    def create_fixed_main(self):
        """Cria vers√£o corrigida do main.py"""
        main_path = os.path.join(src_path, 'main.py')
        fixed_main_path = os.path.join(src_path, 'main_fixed.py')
        
        try:
            with open(main_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Localizar fun√ß√£o main
            main_func_start = content.find("def main():")
            if main_func_start == -1:
                self.logger.error("Fun√ß√£o main n√£o encontrada")
                return False
                
            # Nova implementa√ß√£o da fun√ß√£o main
            new_main_func = '''def main():
    """Fun√ß√£o principal - VERS√ÉO CORRIGIDA PARA GUI"""
    # Configurar logging apenas uma vez
    if not logging.getLogger().handlers:
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
    
    logger = logging.getLogger('Main')
    logger.info("Iniciando Sistema de Trading v2.0 - Vers√£o GUI Corrigida")
    
    try:
        # Carregar configura√ß√£o
        config = load_config()
        
        # Verificar credenciais obrigat√≥rias
        required_fields = ['key', 'username', 'password']
        missing_fields = [field for field in required_fields if not config.get(field)]
        
        if missing_fields:
            logger.error(f"Campos obrigat√≥rios n√£o configurados no .env: {', '.join(missing_fields)}")
            return 1
            
        # Log das configura√ß√µes (sem senhas)
        logger.info(f"Usu√°rio: {config['username']}")
        logger.info(f"Conta: {config.get('account_id', 'N√£o especificada')}")
        logger.info(f"Corretora: {config.get('broker_id', 'N√£o especificada')}")
        logger.info(f"Ticker: {config.get('ticker', 'Auto-detectado')}")
        logger.info(f"GUI Habilitado: {config.get('use_gui', False)}")
            
        # Criar sistema
        system = TradingSystem(config)
        
        # Inicializar
        if not system.initialize():
            logger.error("Falha na inicializa√ß√£o do sistema")
            return 1
            
        # üîß CORRE√á√ÉO CR√çTICA: Tratamento especial para GUI
        if config.get('use_gui', False):
            logger.info("Modo GUI: Sistema rodar√° em background, GUI na thread principal")
            
            # Iniciar opera√ß√£o (que agora gerencia threading automaticamente)
            if not system.start():
                logger.error("Falha ao iniciar opera√ß√£o")
                return 1
        else:
            logger.info("Modo Console: Execu√ß√£o tradicional")
            
            # Iniciar opera√ß√£o sem GUI
            if not system.start():
                logger.error("Falha ao iniciar opera√ß√£o")
                return 1
                
        return 0
        
    except KeyboardInterrupt:
        logger.info("Sistema interrompido pelo usu√°rio")
        return 0
        
    except Exception as e:
        logger.error(f"Erro fatal: {e}", exc_info=True)
        return 1'''
        
            # Encontrar fim da fun√ß√£o main original
            end_of_main = content.find("\n\nif __name__ == '__main__':")
            if end_of_main == -1:
                end_of_main = len(content)
                
            # Substituir fun√ß√£o main
            before_main = content[:main_func_start]
            after_main = content[end_of_main:]
            
            new_content = before_main + new_main_func + after_main
            
            # Salvar vers√£o corrigida
            with open(fixed_main_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
                
            self.logger.info(f"‚úì Vers√£o corrigida criada: {fixed_main_path}")
            return True
            
        except Exception as e:
            self.logger.error(f"Erro criando main corrigido: {e}")
            return False
            
    def run_complete_fix(self):
        """Executa corre√ß√£o completa do sistema"""
        self.logger.info("üîß Iniciando corre√ß√£o completa do threading GUI...")
        
        success_count = 0
        total_fixes = 4
        
        # 1. Corrigir trading_system.py
        if self.apply_trading_system_fix():
            success_count += 1
            self.logger.info("‚úì 1/4 - Trading system corrigido")
        else:
            self.logger.error("‚úó 1/4 - Falha na corre√ß√£o do trading system")
            
        # 2. Adicionar m√©todo background
        if self.add_background_loop_method():
            success_count += 1
            self.logger.info("‚úì 2/4 - M√©todo background adicionado")
        else:
            self.logger.error("‚úó 2/4 - Falha ao adicionar m√©todo background")
            
        # 3. Corrigir GUI
        if self.fix_gui_monitor_threading():
            success_count += 1
            self.logger.info("‚úì 3/4 - Monitor GUI corrigido")
        else:
            self.logger.error("‚úó 3/4 - Falha na corre√ß√£o do monitor GUI")
            
        # 4. Criar main corrigido
        if self.create_fixed_main():
            success_count += 1
            self.logger.info("‚úì 4/4 - Main corrigido criado")
        else:
            self.logger.error("‚úó 4/4 - Falha ao criar main corrigido")
            
        # Relat√≥rio final
        self.logger.info(f"\n{'='*50}")
        self.logger.info(f"CORRE√á√ÉO GUI THREADING CONCLU√çDA")
        self.logger.info(f"{'='*50}")
        self.logger.info(f"Sucessos: {success_count}/{total_fixes}")
        
        if success_count == total_fixes:
            self.logger.info("üéâ TODAS as corre√ß√µes aplicadas com sucesso!")
            self.logger.info("\nüìã INSTRU√á√ïES DE USO:")
            self.logger.info("1. Use 'python src/main_fixed.py' para vers√£o corrigida")
            self.logger.info("2. Ou substitua main.py original pela vers√£o corrigida")
            self.logger.info("3. GUI agora roda na thread principal (sem erros)")
            self.logger.info("4. Sistema roda em background thread")
            self.logger.info("5. Fechamento do GUI para automaticamente o sistema")
            return True
        else:
            self.logger.warning(f"‚ö†Ô∏è  Apenas {success_count}/{total_fixes} corre√ß√µes bem-sucedidas")
            self.logger.info("Verifique os logs para detalhes dos erros")
            return False


def main():
    """Fun√ß√£o principal da corre√ß√£o"""
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    logger = logging.getLogger('GUIFix')
    logger.info("Iniciando corre√ß√£o de threading do GUI...")
    
    try:
        fixer = GUIThreadingFix()
        success = fixer.run_complete_fix()
        
        if success:
            logger.info("‚úì Corre√ß√£o conclu√≠da com sucesso!")
            return 0
        else:
            logger.error("‚úó Corre√ß√£o falhou")
            return 1
            
    except Exception as e:
        logger.error(f"Erro na corre√ß√£o: {e}", exc_info=True)
        return 1


if __name__ == "__main__":
    sys.exit(main())
